<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo</title>
    <url>/2018/12/30/Hello-Hexo/</url>
    <content><![CDATA[<h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><blockquote>
<p>荒废hexo好久了，今天重拾hexo建立自己的技术小站，分享一些平时折腾的小点滴，就当备忘录了</p>
</blockquote>
<p>作为一个懒人，可能会出现如下情况：</p>
<ul>
<li>长期不更新</li>
<li>不定期更新</li>
<li>通篇吐槽</li>
<li>很多错误</li>
<li>很少写一键脚本</li>
</ul>
<hr>
<h2 id="希望这是一个好的开始"><a href="#希望这是一个好的开始" class="headerlink" title="希望这是一个好的开始"></a>希望这是一个好的开始</h2><p>不求能有多少能力提升，最起码要能把学到或者碰到的记录下来</p>
<p>事实上我又一次荒废了很久，现在终于发现hexo用来做youtube视频的文字补充效果不错，使用简单，还不用考虑在线空间的大小，直接利用Github真心不错,当然现在巨硬收购了Github，最近的一些政策还是很不错的</p>
<hr>
<h2 id="没人看也没事"><a href="#没人看也没事" class="headerlink" title="没人看也没事"></a>没人看也没事</h2><p>可能这就是我自己的网络笔记本，有些时候能把自己遇到的事情和学习到的东西记录下来本身就是一种勇气，最起码你必须为此付出精力，过去二十几年都荒废了太多太多了，希望现在醒悟还不晚！</p>
<h2 id="如果懒症爆发了怎么办"><a href="#如果懒症爆发了怎么办" class="headerlink" title="如果懒症爆发了怎么办"></a>如果懒症爆发了怎么办</h2><p>如果懒症再次爆发，这个问题我也不知道答案，哪位朋友有比较好的方法处理懒症呢？</p>
]]></content>
  </entry>
  <entry>
    <title>又一款内网穿透工具——inlets</title>
    <url>/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>随着IPV4地址的不断匮乏，现在很多电信运营商早就开始将用户的上网IP私网化，即我们常说的内网地址，这样的地址是经过NAT的，很多用户通过运营商提供的内网地址共享一个公网地址进行上网，运营商的IP资源节省了，普通用户也感觉不出什么区别，但对于需要外部访问家中或者公司中一些资源的用户来说，这就是灾难，也许有人说你可以打电话投诉来获取公网IP，电信联通可能还行得通，对于大内网的移动就无法实现了，为了解决访问内部资源的这个问题，内网穿透工具应运而生，内网穿透工具也如雨后春笋一般扎堆出现了<strong>Ngrok，Frp，Serveo</strong>乃至已经商业化很成功的花生壳，这类工具虽然已经很成熟了，但这并不是本篇分享的重点。通过github的推荐，我发现了一个有趣的内网穿透工具——<a href="https://github.com/alexellis/inlets">inlets</a></p>
<span id="more"></span>

<h2 id="为啥推荐它"><a href="#为啥推荐它" class="headerlink" title="为啥推荐它"></a>为啥推荐它</h2><hr>
<p>有时候第一眼的感觉很重要，它就是那个吸引我的工具，虽然我现在的主力依然是Frp，但我真的觉得inlets值得一试</p>
<p>inlets 结合了反向代理和 websocket 隧道，通过出口节点将内部的http服务暴露给公网。出口节点可以是 VPS 或具有 IPv4 IP 地址的任何其他计算机，与SSL结合使用时inlets可以与任何支持CONNECT的内网HTTP代理一起使用</p>
<h2 id="它能做啥"><a href="#它能做啥" class="headerlink" title="它能做啥"></a>它能做啥</h2><hr>
<blockquote>
<p>开发者<a href="https://github.com/alexellis">Alex Ellis</a>更新还是很频繁的，由1.x升级到2.x之后，作者直接声称其完全可以胜任生产环境，只不过在部署之前建议先测试一下</p>
</blockquote>
<ul>
<li>基础功能：</li>
</ul>
<p>1.根据客户端设置在远程服务器上创建端口<br>2.基于域名进行端口复用<br>3.利用<strong>SSL over websocket</strong>进行安全的加密通信<br>4.断线重连<br>5.支持身份认证<br>6.多平台支持<br>7.与Docker和Kubernetes集成<br>8.原生跨平台支持，包括ARMHF和ARM64架构<br>9.除HTTP(s)以外，还支持在隧道内传输Websocket流量</p>
<ul>
<li>计划功能支持：</li>
</ul>
<p>1.自动配置DNS&#x2F;A记录<br>2.基于 Azure ACI 和 AWS Fargate，以 Serverless 容器的方式运行「出口节点」。<br>3.通过 DNS01 challenge 使用 LetsEncrypt Staging 或 Production 签发证<br>…</p>
<p>虽然此时可以穿透的协议还只局限于HTTP或者HTTPS?，但作者还是愿意在今后的更新中添加对纯TCP流量的支持；未来肯定会越来越美好，有能力的小伙伴不妨也为其提供自己的一份力量</p>
<h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><hr>
<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><img src="/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/01.png" class="" title="inlets 01">

<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ul>
<li>假设将服务器的域名设定为”<a href="http://www.site.com&quot;,此时inlets作为服务端监听在服务器的80端口,根据客户发起的协议匹配不同规则/">www.site.com&quot;，此时inlets作为服务端监听在服务器的80端口，根据客户发起的协议匹配不同规则</a></li>
<li>而客户端使用websocket协议对服务端发起通讯，通讯可以使用加密或者不加密两种模式进行，这完全取决于服务端是否使用SSL加密</li>
<li>客户端和服务器通过共享密钥进行身份认证，认证通过即建立起了连接</li>
<li>此时，客户端设定的内网地址和端口就和服务端建立起了一条隧道</li>
<li>隧道建立后，服务端的80端口就相当于映射了客户端本地的127.0.0.1:3000</li>
<li>当用户访问”<a href="http://www.site.com&quot;这个网址时,就相当于访问内网中的3000端口/">www.site.com&quot;这个网址时，就相当于访问内网中的3000端口</a></li>
</ul>
<p>稍微概括一下就是类似于如下的流程</p>
<p>本地应用端口 &lt;&#x3D;&#x3D;http(s)&#x2F;ws(s)&#x3D;&#x3D;&gt; inlets(client) &lt;&#x3D;&#x3D;ws(s)&#x3D;&#x3D;&gt; inlets(server) &lt;&#x3D;&#x3D;http(s)&#x3D;&#x3D;&gt; 用户浏览器</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><hr>
<blockquote>
<p>光讲原理好像也没啥意义，那就用个人的一个实例来说明吧！</p>
</blockquote>
<h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><blockquote>
<p>inlets之间使用websocket进行通讯，如果需要证书加密的话，即ssl加密，那中间就需要套接一个web服务器，它可以是nginx，也可以是caddy，此处使用配置相对简单的caddy进行演示，当然选择它的还有一个原因就是它支持自动签发证书，由于google的“恶意推广”，https网站将成为主流，给网站配置个证书也不错</p>
</blockquote>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul>
<li>需要拥有一台拥有公网IP的主机，如果主机在国内，并且还需要开放80端口和443端口，还需要解决备案的问题</li>
<li>拥有一个域名，并且可以随意修改DNS解析，免费的，收费的都可以</li>
<li>耐心很重要，由于涉及到两台主机的操作，暂时还没有一键脚本可以使用</li>
<li>服务端和客户端只能使用64位的系统，当然现在也已经支持arm架构的硬件设备进行安装了</li>
</ul>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><blockquote>
<p>也许这就是我自己的瞎折腾，但是希望能给大家以启发</p>
</blockquote>
<ul>
<li>域名：etspace.xyz</li>
<li>服务器公网ip：<del>165.227.56.252</del></li>
<li>本地客户端主机：<del><a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO2/zh#.E4.BD.BF.E7.94.A8.E5.BC.80.E6.BA.90.E7.A4.BE.E5.8C.BA.E4.B8.BB.E7.BA.BFBSP">NanoPi NEO2</a>(很不幸被我买了)</del> ESXi主机上文件存储服务器</li>
<li>需要对外发布的服务：<del>自用黑裙登录页面以及软路由netdata状态页</del> 软路由netdata状态页及routeros登陆页</li>
</ul>
<img src="/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/03.png" class="" title="inlets 03">
<img src="/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/04.png" class="" title="inlets 04">

<h4 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h4><p>vps主机肯定是有的，此处就不写怎么购买了，现在进入你的DNS管理后台，修改域名的解析地址，我使用的是<a href="https://he.net/">he.net</a>，此时进入后台，添加相应的解析记录</p>
<blockquote>
<p>此处需要设置三个解析记录：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">域名</th>
<th align="center">解析类型</th>
<th align="center">计划用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">inlets.etspace.xyz</td>
<td align="center">A</td>
<td align="center">用于主控制通信</td>
</tr>
<tr>
<td align="center">routeros.etsapce.xyz</td>
<td align="center">A</td>
<td align="center">映射本地routeros登陆界面</td>
</tr>
<tr>
<td align="center">netdata.etspace.xyz</td>
<td align="center">A</td>
<td align="center">映射本地netdata状态界面</td>
</tr>
</tbody></table>
<h4 id="服务端上inlets的安装和配置"><a href="#服务端上inlets的安装和配置" class="headerlink" title="服务端上inlets的安装和配置"></a>服务端上inlets的安装和配置</h4><blockquote>
<p>由于inlets是使用go语言进行编写的，只需要下载对应的二进制文件即可，进入release中选择合适的平台进行下载，重新登录项目地址，发现作者已经增加了不少的功能，比较可惜的是全功能的内网穿透工具inlets-pro并不是免费的，如果有能力还是支持一下作者，而对于普通用户而言，inlets已经可以满足大部分功能了</p>
</blockquote>
<ul>
<li>安装inlets</li>
</ul>
<p>官方一键命令<code>curl -sLS https://get.inlets.dev | sh</code></p>
<blockquote>
<p>此处也可以使用作者新增了一个工具<a href="https://github.com/inlets/inletsctl">inletsctl</a>，并且能通过这个工具进行更新及配置，一般情况我使用它来进行intels的安装，不再需要每次登录github进行下载更新了</p>
<ul>
<li>安装inletsctl</li>
</ul>
<p>使用官方命令一键安装<code>curl -sLSf https://inletsctl.inlets.dev | sh</code><br>此处图片—-</p>
<ul>
<li>通过inletsctl 下载安装inlets</li>
</ul>
<p><code>inletsctl download inlets</code>进行安装，inlets会被自动安装到<code>/usr/local/bin/</code>目录下，此时就可以适应inlets命令了</p>
</blockquote>
<h5 id="在执行后续的操作之前，首先建议了解一下inlets的命令和参数"><a href="#在执行后续的操作之前，首先建议了解一下inlets的命令和参数" class="headerlink" title="在执行后续的操作之前，首先建议了解一下inlets的命令和参数"></a>在执行后续的操作之前，首先建议了解一下inlets的命令和参数</h5><blockquote>
<p>通过help命令直接查看</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inlets --help</span><br><span class="line"></span><br><span class="line">Inlets combines a reverse proxy and websocket tunnels to expose your internal</span><br><span class="line">and development endpoints to the public Internet via an exit-node.</span><br><span class="line"></span><br><span class="line">An exit-node may be a 5-10 USD VPS or any other computer with an IPv4 IP address.</span><br><span class="line">You can also use inlets to bridge connect between private networks.</span><br><span class="line"></span><br><span class="line">It is strongly recommended to put a reverse proxy with TLS/SSL enabled such as</span><br><span class="line">Nginx or Caddy in front of your inlets server to enable an encrypted tunnel.</span><br><span class="line"></span><br><span class="line">See: https://github.com/inlets/inlets for more information.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  inlets [flags]</span><br><span class="line">  inlets [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  client      Start the tunnel client.</span><br><span class="line">  help        Help about any command</span><br><span class="line">  server      Start the tunnel server.</span><br><span class="line">  version     Display the clients version information.</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help   help for inlets</span><br><span class="line"></span><br><span class="line">Use &quot;inlets [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inlets server --help</span><br><span class="line">Start the tunnel server on a machine with a publicly-accessible IPv4 IP</span><br><span class="line">address such as a VPS.</span><br><span class="line"></span><br><span class="line">Example: inlets server -p 80</span><br><span class="line">Example: inlets server --port 80 --control-port 8080</span><br><span class="line"></span><br><span class="line">Note: You can pass the --token argument followed by a token value to both the</span><br><span class="line">server and client to prevent unauthorized connections to the tunnel.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  inlets server [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -c, --control-port int             control port for tunnel (default 8080)</span><br><span class="line">      --disable-transport-wrapping   disable wrapping the transport that removes CORS headers for example</span><br><span class="line">  -h, --help                         help for server</span><br><span class="line">  -p, --port int                     port for server and for tunnel (default 8000)</span><br><span class="line">      --print-token                  prints the token in server mode (default true)</span><br><span class="line">  -t, --token string                 token for authentication</span><br><span class="line">  -f, --token-from string            read the authentication token from a file</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inlets client --help</span><br><span class="line"></span><br><span class="line">Start the tunnel client.</span><br><span class="line"></span><br><span class="line">Example: inlets client --remote=192.168.0.101:80 --upstream=http://127.0.0.1:3000</span><br><span class="line">Note: You can pass the --token argument followed by a token value to both the server and client to prevent unauthorized connections to the tunnel.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  inlets client [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help                help for client</span><br><span class="line">      --print-token         prints the token in server mode (default true)</span><br><span class="line">  -r, --remote string       server address i.e. 127.0.0.1:8000 (default &quot;127.0.0.1:8000&quot;)</span><br><span class="line">  -t, --token string        authentication token</span><br><span class="line">  -f, --token-from string   read the authentication token from a file</span><br><span class="line">  -u, --upstream string     upstream server i.e. http://127.0.0.1:3000</span><br></pre></td></tr></table></figure>

<ul>
<li>生成预共享密钥</li>
</ul>
<p>根据上述的帮助信息，需要注意 <strong>-t&#x2F;-f</strong> 这两个参数，服务端和客户端之间需要一种方式来进行身份认证，谁都能接入那就不乱套了！此处使用预共享密钥来进行认证，<code>-t</code>参数对应一个字符串，<code>-f</code>参数对应一个文件，其实就是把密钥存储到一个文件里就行了</p>
<p>基于项目的说明，直接使用系统的随机数进行生成即可，执行<code>echo $(head -c 16 /dev/urandom | shasum | cut -d&quot; &quot; -f1)</code>，所生产的那串字符就是密钥，你可以直接复制了用，或者存储成一个文件，那样下载到本地就可以给客户端使用了</p>
<ul>
<li>启动服务端进行连接测试</li>
</ul>
<p>直接在tmux中运行，执行命令<code>inlets server -t ssssss -p 8000</code>，然后快捷键<code>ctrl+b</code>然后按一下<code>d</code>就能将其切换到后台，此处<code>server</code>这个参数决定了以服务端模式运行，客户端就是<code>client</code></p>
<p>服务端启动了，那么本地客户端也可以启动了，在本地的nanopi上也安装好inlets，测试连接一下服务端，执行：</p>
<p><code>inlets client -r 165.227.56.252:8000 -t ssss -u http://172.16.1.2:5000</code></p>
<p>这条命令的意思是inlets以客户端模式运行，远程连接地址是165.227.56.252，端口8000，密钥是ssss，映射本地的<a href="http://172.16.1.2:5000/">http://172.16.1.2:5000</a> 这个地址,此时在浏览器上输入165.227.56.252:8000就相当于访问本地的<a href="http://172.16.1.2:5000/">http://172.16.1.2:5000</a> ，此处是我群晖的登陆界面</p>
<blockquote>
<p>此处成功进行了连接，也实现了内网穿透，但这样的效果并不是我们所想要的，只能穿透一个算什么牛逼的工具，大家不要着急，请看我后续的操作</p>
</blockquote>
<ul>
<li>实现端口复用和多终端</li>
</ul>
<p>单靠inlets本身实现这些功能并不现实，但我们可以拉来一个小伙伴做辅助即可，官方的实例使用的是<a href="https://caddyserver.com/v1/">caddy</a>，那我们也用这个吧，有了它，证书的事情也可以迎刃而解，至于它该怎么安装，并不是本文的重点，就不写了（请允许我偷懒一下）</p>
<blockquote>
<p>这里需要注意的是caddy此时使用的是<strong>v1</strong>版本，配置文件也是基于此版本，v2版本的配置上有比较大的改变，暂时还没把wiki看明白，有兴趣的朋友可以去看看，谷歌搜索caddy第一个出来的就是<strong>v2</strong>版本，大家一定要注意哦！</p>
</blockquote>
<img src="/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/02.png" class="" title="inlets 02">

<blockquote>
<p>将inlets配置成服务并且开机启动</p>
</blockquote>
<p>其实就是写个开机脚本，直接在<code>/etc/systemd/system/</code>目录下新建<code>inlets.service</code>文件，写入如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Inlets Server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">StartLimitInterval=0</span><br><span class="line">EnvironmentFile=/etc/default/inlets  #注意一下这条配置</span><br><span class="line">ExecStart=/usr/local/bin/inlets server --port=8000 --token=&quot;$&#123;AUTHTOKEN&#125;&quot;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>此处使用了一个变量<code>$&#123;AUTHTOKEN&#125;</code>,这个指代的就是上面生成的那串密钥，本着偷懒的本性，我直接将其加入了系统变量，那么如何加入进去呢？这就要使用这个启动脚本中所设定的变量文件<code>/etc/default/inlets</code>，直接执行<code>echo &quot;export AUTHTOKEN=$(head -c 16 /dev/urandom | shasum | cut -d&quot; &quot; -f1)&quot; &gt; /etc/default/inlets</code>即可，不放心可以查看一下文件中的内容</p>
</li>
<li><p>端口号可以看情况自己设定，如果不指定的话默认就是8000，但一定要和后续编写的caddyfile文件相同</p>
</li>
<li><p>客户端的启动脚本也可以参照这样编写</p>
</li>
</ul>
</blockquote>
<p>后续的工作就是设置允许开机启动，并且让inlets在后台运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable inlets</span><br><span class="line">systemctl start inlets</span><br></pre></td></tr></table></figure>

<ul>
<li>编写CaddyFile文件</li>
</ul>
<blockquote>
<p>之所以使用caddy完全是因为其两个优点：其一，配置简单；其二，可以自动申请证书，怎么使用我就不再赘述了，想要完全发挥它的功能，可以去查看<a href="https://caddyserver.com/v1/docs">官方文档</a>，这里的所有配置主要针对inlets进行配置</p>
</blockquote>
<p>inlets的服务端和客户端之间是通过<a href="https://zh.wikipedia.org/wiki/WebSocket">websocket</a>进行连接的，所以caddy在这里需要将这个连接转发到inlets上，同时还要监听客户端对目的网址的http或者https访问请求，同样需要将连接转发到inlets上，那么配置文件该怎么写呢？</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">inlets.etspace.xyz &#123;</span><br><span class="line">  tls ddxiong0410@gmail.com</span><br><span class="line">  proxy / 127.0.0.1:8000 &#123;</span><br><span class="line">    transparent</span><br><span class="line">  &#125;</span><br><span class="line">  proxy /tunnel 127.0.0.1:8000 &#123;</span><br><span class="line">    transparent</span><br><span class="line">    websocket</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qh.etspace.xyz &#123;</span><br><span class="line">  tls ddxiong0410@gmail.com</span><br><span class="line">  proxy / 127.0.0.1:8000 &#123;</span><br><span class="line">    transparent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">netdata.etspace.xyz &#123;</span><br><span class="line">  tls ddxiong0410@gmail.com</span><br><span class="line">  proxy / 127.0.0.1:8000 &#123;</span><br><span class="line">    transparent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处可以发现主控的域名下会比其它两个域名多了点内容，主要是需要将websocket的连接请求透明转发到inlets的监听端口上，默认inlets客户端模式会通过websocket协议访问域名的&#x2F;tunnel目录，当caddy接受到这样的连接请求是就会透明转发到inlets的8000端口上，然后服务端和客户端通过预共享密钥进行认证，之后的事情就顺理成章了～</p>
<p>主控域名只需要一个，它承载了客户端和服务端之间的主要的流量，其他设置的域名都想到于是内网对外映射的入口，按照需要进行添加和设置即可</p>
<blockquote>
<p>总体而言，inlets所需要的加密和对外连接主要需要一个主域名加上若干个服务域名构成（当然，如果只需要映射一个服务的话，主域名即可以当认证端又可以当映射入口，上述配置文件中&lt;inlets.etspace.xyz&gt;域名下所设置的两个<strong>proxy</strong>选项就是以此为目的设置的</p>
</blockquote>
<p>配置文件写好了，重启一下caddy，<code>systemctl restart caddy</code>，此时caddy会自动为配置文件中的三个域名申请<a href="https://letsencrypt.org/zh-cn/">Let’s Encrypt</a>证书，有了证书加持，用户访问这个入口的数据也会是加密的，提高一定的安全性</p>
<ul>
<li>inlets客户端配置</li>
</ul>
<p>在本地的nanopi上编写启动文件，参照一下服务端的配置，个人使用的如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Inlets Client Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">StartLimitInterval=0</span><br><span class="line">EnvironmentFile=/etc/default/inlets</span><br><span class="line">ExecStart=/usr/local/bin/inlets client --remote=&quot;$&#123;REMOTEHOST&#125;&quot; --token=&quot;$&#123;AUTHTOKEN&#125;&quot; --upstream=&quot;$&#123;UPSTREAM&#125;&quot;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<blockquote>
<p>inlets由服务端模式改成客户端模式，相应的参数也有一些变化，<strong>token</strong>的部分不变，多了<strong>remote</strong>和<strong>upstream</strong>，同样的，我依然会在变量文件中对他们进行设置，这样也是为了方便修改和重启</p>
</blockquote>
<p>直接编辑<code>/etc/default/inlets</code>文件，此时的内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export AUTHTOKEN=ssssss</span><br><span class="line">export REMOTEHOST=wss://inlets.etspace.xyz</span><br><span class="line">export UPSTREAM=&quot;qh.etspace.xyz=http://172.16.1.2:5000,netdata.etspace.xyz=http://172.16.1.10:1999&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于证书的加入，客户端和服务端之间使用了加密通讯，那么协议类型就变成了wss，而映射的本地服务需要将域名和本地ip以及端口号一一对应，有多少个就加多少个，各个项目直接通过<code>,</code>隔开</p>
</blockquote>
<p>编辑完上述的文件后，就可以将inlets设置成开机启动，然后进行一下测试了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable inlets</span><br><span class="line">systemctl start inlets</span><br><span class="line">systemctl status inlets</span><br></pre></td></tr></table></figure>

<ul>
<li>测试一下</li>
</ul>
<p>直接打开<a href="https://qh.etspace.xyz/">https://qh.etspace.xyz</a>看看是什么样的，基本上就可以很顺利的在外面打开家里的群晖登录界面，<a href="https://netdata.etspace.xyz/">https://netdata.etspace.xyz</a>也一样，那么如果需要建立更多的映射，就按照这样的流程进行配置即可</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>inlets可能功能上没有Frp强，但却是一个很好玩的工具，对于一些只需要进行网页端控制的用户而言，不仅做到了对外映射，还能配合caddy进行证书加密，体验还是很不错的，端口复用，也不用担心会和v2ray这样的科学上网发生冲突，或者说，由于inlets的加入也有可能增加一定的混淆能力，毕竟访问这些域名所获取到的可是实打实的一些网站～</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.08.27</strong> 建立初稿</li>
<li><strong>2019.11.30</strong> 稍微更新点东西</li>
<li><strong>2020.02.22</strong> 从冬眠中复苏，决定稍微写点什么</li>
<li><strong>2020.02.29</strong> 还是要更新的</li>
<li><strong>2020.03.06</strong> 加上图片应该就完成了</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git多账户模式</title>
    <url>/2020/02/26/git-multi-user/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>使用github有一段时间，终于算是能流畅使用了，除了那坑爹网络情况（当然这主要怪大天朝的gfw），但最近遇到一个问题，个人有两个github账号，分别存储着不同类型的内容，我不想两者有太多的联系，所以希望不同的项目使用不同的账号进行管理和提交，这个就有点犯难了，该怎么做，在谷歌上查询了一圈终于找到了一个感觉比较方便的方法，此方法依然使用https进行提交，而不是大部分人推荐的使用ssh密钥的方式，对于个人电脑而言，安全性应该还会那么差，毕竟这电脑一直都在家；那么就记录一下过程吧！</p>
<span id="more"></span>

<h2 id="清除默认的git配置"><a href="#清除默认的git配置" class="headerlink" title="清除默认的git配置"></a>清除默认的git配置</h2><hr>
<p>首先查看一下git的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br><span class="line">git config --system -l</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于https方式的push每次都需要输入密码，所以一般都会使用credential.helper把账号密码存在global里，对于单用户没啥问题，多用户就悲剧了，通过上述命令查看一下credential.helper是在全局还是系统中设置的</p>
</blockquote>
<p>如果懒得看，直接全部清除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset credential.helper</span><br><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure>

<h2 id="针对项目配置账户"><a href="#针对项目配置账户" class="headerlink" title="针对项目配置账户"></a>针对项目配置账户</h2><hr>
<blockquote>
<p>如果本地的项目比较多，可能这并不是一个明智的选择</p>
</blockquote>
<ul>
<li>进入项目目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://用户名@github.com/用户名/项目名</span><br><span class="line">git config --local credential.helper store</span><br></pre></td></tr></table></figure>

<ul>
<li>进入别的目录继续执行上述操作</li>
</ul>
<h2 id="正式提交项目"><a href="#正式提交项目" class="headerlink" title="正式提交项目"></a>正式提交项目</h2><hr>
<p>当对项目进行了修改需要提交时（一般修改配置之后第一次会出现这样的情况）</p>
<p>需要你重新输入一次用户名和密码，按照要求输入即可，下次就不再需要重复输入用户名和密码了</p>
<blockquote>
<p>基本上每个项目都会这样的情况发生，所以说项目较少可以这样干，项目多就不要考虑这个办法了，还是用更加安全方便的ssh密钥吧！</p>
</blockquote>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2020.02.26</strong> 初稿即成稿，太难得了</li>
</ul>
]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划 虚拟机安装Debian</title>
    <url>/2019/07/18/linux-router-00-install-debian/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>Debian作为软路由系统的基础，它的安装还是需要拿出来说一下的，当然老鸟可以忽略，本说明教程只针对小白用户(当然，让所有人都能搞明白这是一种能力，本人还做不到，大家先凑合看看吧，如果有啥不明白的记得留言吧，我能够解决的基本上都会回复的)；在接下来的说明中，我将使用虚拟机来说明，也是因为利用了虚拟机，在网络配置上还是很灵活了，废话不多说，接下来就开始吧！</p>
<span id="more"></span>

<h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><hr>
<blockquote>
<p>作为二级路由，本身对于性能的要求并不是特别大，我过去使用的那台虚拟机配置就很低，这次依然沿用那台虚拟机的配置情况</p>
</blockquote>
<ul>
<li>双核处理器</li>
<li>256M内存</li>
<li>8~16GB磁盘空间</li>
<li>Debian9.9系统</li>
<li>双网卡</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><hr>
<blockquote>
<p>安装之前还是需要说明一下虚拟机的配置</p>
</blockquote>
<ol>
<li>新建虚拟机</li>
</ol>
<img src="/2019/07/18/linux-router-00-install-debian/63.png" class="" title="debian 01">

<p>新建一个虚拟机，使用自定义配置</p>
<img src="/2019/07/18/linux-router-00-install-debian/64.png" class="" title="debian 02">

<p>随便给这个虚拟机起个名字，这里就叫做123了</p>
<img src="/2019/07/18/linux-router-00-install-debian/65.png" class="" title="debian 03">

<p>虚拟机的位置就只能使用默认的位置了，其它的磁盘都被RDM了</p>
<img src="/2019/07/18/linux-router-00-install-debian/66.png" class="" title="debian">

<p>虚拟机版本就用6.0版本中最高的11了</p>
<img src="/2019/07/18/linux-router-00-install-debian/67.png" class="" title="debian 04">

<p>Linux版本就用Debian 8了，ESXI6.0提供的配置中Debian8已经是最高的了，9he10虽然没有提供，但你直接用8的配置也是可以正常使用的</p>
<img src="/2019/07/18/linux-router-00-install-debian/68.png" class="" title="debian 05">

<p>处理器就选择单处理器，双内核了，入门款配置</p>
<img src="/2019/07/18/linux-router-00-install-debian/69.png" class="" title="debian">

<p>内存能少就少，256M我都觉得有点多，下次试试128M能不能正常跑起来</p>
<img src="/2019/07/18/linux-router-00-install-debian/70.png" class="" title="debian 07">

<p>由于不想折腾单臂路由，那就来个两块网卡吧，分别是主路由的内网部分和软件模拟的虚拟交换机</p>
<img src="/2019/07/18/linux-router-00-install-debian/71.png" class="" title="debian 08">

<p>SCSI控制器就用系统默认的吧</p>
<img src="/2019/07/18/linux-router-00-install-debian/72.png" class="" title="debian 09">
<img src="/2019/07/18/linux-router-00-install-debian/73.png" class="" title="debian 10">
<img src="/2019/07/18/linux-router-00-install-debian/74.png" class="" title="debian 11">

<p>创建新的虚拟磁盘，就用推荐的16GB吧，即使是这个大小，也用不完</p>
<img src="/2019/07/18/linux-router-00-install-debian/75.png" class="" title="debian 12">

<p>在配置完之前可以勾选完成前编辑虚拟机设置，这样可以直接进行手动配置</p>
<img src="/2019/07/18/linux-router-00-install-debian/76.png" class="" title="debian 12">

<p>在虚拟机属性中主要修改两个部分，软驱和光驱</p>
<img src="/2019/07/18/linux-router-00-install-debian/77.png" class="" title="debian 13">

<p>移除软驱，这年头还有多少用，连<a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">linus</a>都已经觉得过时了，那就真的过时了，然后就是在光驱中加载系统的镜像，并且需要勾选<strong>在打开电源时连接</strong>这个选项，这样开机才会从光驱引导</p>
<blockquote>
<p>虚拟机的配置就是这些，资源使用真是不高</p>
</blockquote>
<h2 id="开始Debian安装"><a href="#开始Debian安装" class="headerlink" title="开始Debian安装"></a>开始Debian安装</h2><hr>
<blockquote>
<p>我将对每一步操作都做出一些说明</p>
</blockquote>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><img src="/2019/07/18/linux-router-00-install-debian/01.png" class="" title="debian 14">

<p>打开虚拟控制台并启动电源，如果配置没有问题的话，都会从光盘启动，然后就会出现上述界面，鼠标点击安装画面进入控制台，直接回车即可</p>
<img src="/2019/07/18/linux-router-00-install-debian/02.png" class="" title="debian 15">
<img src="/2019/07/18/linux-router-00-install-debian/03.png" class="" title="debian 16">

<p>后期会使用SSH登陆，有中文支持会比较舒服，直接选择中文，当然由于中文字符的特殊性，系统还是会警告一下询问你是否使用中文进行安装，不管了，直接用方向键左右选择<strong>是</strong>进入下一步</p>
<img src="/2019/07/18/linux-router-00-install-debian/04.png" class="" title="debian 17">
<img src="/2019/07/18/linux-router-00-install-debian/05.png" class="" title="debian 18">

<p>区域选择直接中国，当然键盘模式也选择汉语啦</p>
<img src="/2019/07/18/linux-router-00-install-debian/06.png" class="" title="debian 19">

<p>之后安装程序就会开始检测硬件并安装临时安装系统（不会写入硬盘）</p>
<img src="/2019/07/18/linux-router-00-install-debian/08.png" class="" title="debian 20">
<img src="/2019/07/18/linux-router-00-install-debian/09.png" class="" title="debian 21">

<p>按照要求配置计算机名，当然你保持默认都行，注意使用的字符类型和格式，域名暂时就不配置了</p>
<img src="/2019/07/18/linux-router-00-install-debian/10.png" class="" title="debian 22">
<img src="/2019/07/18/linux-router-00-install-debian/11.png" class="" title="debian 23">

<p>配置一下Root密码，记住Root用户拥有最高的权限，在局域网中可以随意一点，如果将主机对外开放了，还是稍微设置的复杂一点会比较好,密码的配置基本上需要输入两次以防止因为输入失误导致的无法登陆</p>
<img src="/2019/07/18/linux-router-00-install-debian/12.png" class="" title="debian 24">
<img src="/2019/07/18/linux-router-00-install-debian/13.png" class="" title="debian 25">
<img src="/2019/07/18/linux-router-00-install-debian/14.png" class="" title="debian 26">
<img src="/2019/07/18/linux-router-00-install-debian/15.png" class="" title="debian 27">

<p>当然出于安全性考虑，系统会要求创建一个较低权限的普通用户，那我就随便建立一个了，同样的密码也需要输入两次</p>
<img src="/2019/07/18/linux-router-00-install-debian/16.png" class="" title="debian 28">

<p>接下来安装程序会进行检测硬盘和别的设备，比如网卡什么的</p>
<img src="/2019/07/18/linux-router-00-install-debian/17.png" class="" title="debian 29">

<p>由于使用的是网络安装镜像，安装过程需要联网进行，此处系统会询问你使用哪块网卡作为主网络接口，此处一般情况都是ens192，也是路由的WAN口，如果能够正常获取到IP，那就会自动进入下一步，如果不行的话就换一个网卡</p>
<img src="/2019/07/18/linux-router-00-install-debian/18.png" class="" title="debian 30">

<p>网卡选好了，那就配置磁盘分区吧，这里使用了LVM，使用这个可以方便的在后期进行磁盘扩容，也许以后会搞个共享，那容量太小不能扩容就悲剧了，还是用LVM吧，比较灵活</p>
<img src="/2019/07/18/linux-router-00-install-debian/19.png" class="" title="debian 31">
<img src="/2019/07/18/linux-router-00-install-debian/20.png" class="" title="debian 32">
<img src="/2019/07/18/linux-router-00-install-debian/21.png" class="" title="debian 33">
<img src="/2019/07/18/linux-router-00-install-debian/22.png" class="" title="debian 34">
<img src="/2019/07/18/linux-router-00-install-debian/23.png" class="" title="debian 35">

<p>选择哪个16G的硬盘，不用想太多，回车就是了，新手比较时候直接使用单个分区，这也是为啥建议使用LVM的原因，直接选择<strong>分区设定结束并将修改写入磁盘</strong>，最后确认的时候选择是就将进行自动分区并挂载</p>
<img src="/2019/07/18/linux-router-00-install-debian/25.png" class="" title="debian 36">

<p>当询问你是否需要扫描其他的CD或DVD的时候，选择否，直接通过网络获取更新就已经足够了</p>
<img src="/2019/07/18/linux-router-00-install-debian/26.png" class="" title="debian 37">
<img src="/2019/07/18/linux-router-00-install-debian/27.png" class="" title="debian 38">

<p>要进行网络安装，肯定需要告诉程序从哪里下载安装文件，此处就就近原则，使用中国的地址，在这里可以看到有Debian官方的，也有清华大学，网易等，其实我想用阿里云的，可惜内置的并没有，此处的选择也会影响安装完系统后系统所使用的默认源地址</p>
<img src="/2019/07/18/linux-router-00-install-debian/28.png" class="" title="debian 39">

<p>是否需要使用代理根据实际情况来，家里的网络质量还可以，而且使用了中国区的源，暂时就不配置代理了</p>
<img src="/2019/07/18/linux-router-00-install-debian/29.png" class="" title="debian 40">
<img src="/2019/07/18/linux-router-00-install-debian/30.png" class="" title="debian 41">

<p>组件从网络下载需要时间，具体取决于你的网络情况，不知道是不是网络抽风呢还是我最近在家配置IPV6的原因，下载速度不咋地</p>
<img src="/2019/07/18/linux-router-00-install-debian/31.png" class="" title="debian 42">

<p>系统还会询问你是否要参加软件包流行度调查，个人是没有参加过，哪个小伙伴如果有时间，可以支持一下，此处我选择了<strong>否</strong></p>
<img src="/2019/07/18/linux-router-00-install-debian/33.png" class="" title="debian 43">
<img src="/2019/07/18/linux-router-00-install-debian/34.png" class="" title="debian 44">

<p>虚拟机是用来配置路由器的，自然是不需要提供桌面支持的，所以此处勾选掉桌面，家里也没打印机，同样勾选掉，SSH工具还是很有必要的，勾选上，就按照这样的选择进行应用安装吧</p>
<img src="/2019/07/18/linux-router-00-install-debian/35.png" class="" title="debian 45">
<img src="/2019/07/18/linux-router-00-install-debian/36.png" class="" title="debian 46">

<p>再一次的需要下载一堆安装包，速度依然不咋地，后悔当初没有设个代理试试</p>
<img src="/2019/07/18/linux-router-00-install-debian/37.png" class="" title="debian 47">

<p>出现这个画面的时候基本上系统已经安装完成了，就差个引导了</p>
<img src="/2019/07/18/linux-router-00-install-debian/38.png" class="" title="debian 48">
<img src="/2019/07/18/linux-router-00-install-debian/39.png" class="" title="debian 49">

<p>选择安装到虚拟硬盘，即<code>/dev/sda</code>，写入很快，之后就可以选择继续进行回车，至此系统就安装好了</p>
<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><blockquote>
<p>安装完也不是马上就能使用的，还是需要适当调节一下的</p>
</blockquote>
<h4 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h4><p>VMware Tools作为虚拟机和主机之间通讯的桥梁，不仅能提高性能，还能对系统进行一些检测增强，特别是想要自动开关机功能的，这是必装组件</p>
<ul>
<li>登陆系统</li>
</ul>
<img src="/2019/07/18/linux-router-00-install-debian/40.png" class="" title="debian 50">
<img src="/2019/07/18/linux-router-00-install-debian/41.png" class="" title="debian 51">

<p>使用root登陆系统，密码就是安装时候设置的，此处输入密码是没有提示的，不要觉得没有输进去而不断尝试的去输入，直接输入回车即可</p>
<ul>
<li>加载安装镜像</li>
</ul>
<img src="/2019/07/18/linux-router-00-install-debian/42.png" class="" title="debian 52">

<p>勾选 <strong>虚拟机————客户机————安装&#x2F;升级VMware Tools</strong>，在光驱中加载安装镜像</p>
<img src="/2019/07/18/linux-router-00-install-debian/43.png" class="" title="debian 53">
<img src="/2019/07/18/linux-router-00-install-debian/44.png" class="" title="debian 54">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">cd /mnt</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>挂载镜像，并将光驱挂载到 <strong>&#x2F;mnt</strong> 目录</p>
<ul>
<li>解压缩安装包并进行安装</li>
</ul>
<img src="/2019/07/18/linux-router-00-install-debian/46.png" class="" title="debian 55">
<img src="/2019/07/18/linux-router-00-install-debian/47.png" class="" title="debian 56">
<img src="/2019/07/18/linux-router-00-install-debian/48.png" class="" title="debian 57">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp VMwareTools-10.2.5-8068406.tar.gz /tmp</span><br><span class="line">cd /tmp</span><br><span class="line">tar xzf VMwareTools-10.2.5-8068406.tar.gz</span><br><span class="line">ls</span><br><span class="line">cd vmware-tools-distrib</span><br><span class="line"></span><br><span class="line">./vmware-install.pl</span><br></pre></td></tr></table></figure>

<p>虽然把镜像进行了挂载，但其本身是不支持写入的，所以需要复制出安装包到一个可读写的目录进行操作，这里直接复制到临时目录进行安装；执行<code>./vmware-install.pl</code>安装命令后只需要按下<strong>y</strong>同意即可，其它的选项直接回车即可安装完成</p>
<img src="/2019/07/18/linux-router-00-install-debian/49.png" class="" title="debian 58">
<img src="/2019/07/18/linux-router-00-install-debian/50.png" class="" title="debian 59">

<p>本身软件包就不大，安装还是很迅速的，就是需要点不少次回车</p>
<img src="/2019/07/18/linux-router-00-install-debian/62.png" class="" title="debian 71">

<p>安装完成之后就可以在虚拟机摘要部分看到虚拟机配置到的网卡IP信息了，基本上出现这个就说明<strong>VMware Tools</strong>安装成功了</p>
<h4 id="对终端进行个性化"><a href="#对终端进行个性化" class="headerlink" title="对终端进行个性化"></a>对终端进行个性化</h4><p>由于没有安装图形界面，那命令界面将是我们长期面对的交互界面，当然喜欢它稍微美观点，好用点，那就稍微个性化一下吧</p>
<ul>
<li>编辑配置文件</li>
</ul>
<img src="/2019/07/18/linux-router-00-install-debian/51.png" class="" title="debian 60">

<p>终端的配置文件一般在用户目录的根目录中，并且都是隐藏的，类Unix系统的隐藏文件基本上都是以“.”+“文件名”的形式存在的，在root目录下执行<code>vi .bashrc</code></p>
<img src="/2019/07/18/linux-router-00-install-debian/52.png" class="" title="debian 61">
<img src="/2019/07/18/linux-router-00-install-debian/53.png" class="" title="debian 62">

<p>删除部分项目前的 <strong>#</strong> 符号即可启用这条功能，其中<strong>alias</strong>后设置自定义命令，今后可能会用到，按下<strong>Esc</strong>键，输入<code>:wq</code>后回车即可保存并退出</p>
<ul>
<li>使配置文件生效</li>
</ul>
<img src="/2019/07/18/linux-router-00-install-debian/54.png" class="" title="debian 63">

<p>执行<code>source .bashrc</code>就可以让命令生效</p>
<h4 id="安装部分软件"><a href="#安装部分软件" class="headerlink" title="安装部分软件"></a>安装部分软件</h4><blockquote>
<p>由于包管理系统的存在，Debian安装常用应用很简单</p>
</blockquote>
<img src="/2019/07/18/linux-router-00-install-debian/55.png" class="" title="debian 64">
<img src="/2019/07/18/linux-router-00-install-debian/56.png" class="" title="debian 65">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install tmux htop lrzsz vim -y</span><br></pre></td></tr></table></figure>

<p>上述命令将安装我常用的一些应用，每个人有自己的习惯，大家根据自己的喜欢安装即可，当然由于普通的终端对中文字符支持的问题，此处的中文说明都变成了方块，还是通过SSH登陆比较好</p>
<h4 id="允许root账户通过SSH登陆"><a href="#允许root账户通过SSH登陆" class="headerlink" title="允许root账户通过SSH登陆"></a>允许root账户通过SSH登陆</h4><blockquote>
<p>由于root账户的权限太高，基于安全性考虑，默认情况下SSH都不会允许通过root帐号进行登录，那如果我就想要有root那样自由的权限呢，那就可以通过修改SSH的配置文件来启用这个功能</p>
</blockquote>
<img src="/2019/07/18/linux-router-00-install-debian/57.png" class="" title="debian 66">

<p>执行<code>vi /etc/ssh/sshd_config</code>打开SSH配置文件</p>
<img src="/2019/07/18/linux-router-00-install-debian/58.png" class="" title="debian 67">
<img src="/2019/07/18/linux-router-00-install-debian/59.png" class="" title="debian 68">
<img src="/2019/07/18/linux-router-00-install-debian/60.png" class="" title="debian 69">

<p>通过<code>/Root</code>命令定位到关键参数处，删除前方的 <strong>#</strong> 符号，然后将后面的值改成 <strong>yes</strong> 后保存退出即可</p>
<img src="/2019/07/18/linux-router-00-install-debian/61.png" class="" title="debian 70">

<p>执行<code>systemctl restart sshd</code>即可重启SSH服务并生效</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>安装其实很简单，主要是由耐心，也不要对命令界面太排斥，当你习惯之后你会发现习惯了就回不去了，一条命令比鼠标点好多下效率高多了</p>
<p>后续就将开始正式的介绍Linux Router的搭建，文字版和视频版互补，希望能够得到大家的支持</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.07.18</strong> 初稿</li>
<li><strong>2019.07.20</strong> 基本内容完成</li>
<li><strong>2019.08.05</strong> 细节修改</li>
<li><strong>2019.09.10</strong> 格式调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划01 基本概念说明</title>
    <url>/2019/07/18/linux-router-01-nat-and-firewall/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>既然已经挖坑了，那就必须好好的开始填坑，在开始Linux路由配置之前，有必要先说明一下网络地址转换<strong>NAT</strong>以及<strong>防火墙</strong>在Linux路由中的作用。</p>
<span id="more"></span>

<h2 id="路由器是什么"><a href="#路由器是什么" class="headerlink" title="路由器是什么"></a>路由器是什么</h2><hr>
<blockquote>
<p>路由器（英语：Router，又称路径器）是一种电讯网络设备，提供路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端（在路由器内部进行），这称为转送。路由工作在OSI模型的第三层——即网络层，例如网际协议（IP）。<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">维基百科</a></p>
</blockquote>
<p>在不同网络之间传输数据的功能叫做路由功能，一般有多个接口，连接到不同的网络中，并且通过路由表进行数据转发，说直白点就是一个向导，当你想去某个地址的时候，你去问它，它就会告诉你如何走，并且帮助你找到这条路；</p>
<p>IP地址只有32位，最多只有42.9亿个地址，还要去掉保留地址、组播地址，能用的地址只有36亿左右，但是当下有数以万亿的主机，没有这么多IP地址怎么办，后面有了IPv6，但是当下IPv4还是主流，利用IPv4怎么满足这么多主机的IP地址呢？答案就是NAT，NAT技术使公司、机构以及个人产生以及局域网，然后在各个局域网的边界WAN端口使用一个或多个公网的IPv4进行一对多转换；</p>
<p>路由转发及NAT是路由器的核心，如果要将Linux改造成路由器就需要实现上述两个功能。</p>
<h2 id="NAT在做啥"><a href="#NAT在做啥" class="headerlink" title="NAT在做啥"></a>NAT在做啥</h2><hr>
<h3 id="NAT定义"><a href="#NAT定义" class="headerlink" title="NAT定义"></a>NAT定义</h3><p>NAT是 Network Address Translation 网络地址转换的缩写。<br>NAT是将私有IP地址通过边界路由转换成外网IP地址，在边界路由的NAT地址转换表记录下这个转换映射记录，当外部数据返回时，路由使用NAT技术查询NAT转换表，再将目标地址替换成内网用户IP地址。</p>
<h3 id="RFC1918规定了三块专有的地址，作为私有的内部组网使用"><a href="#RFC1918规定了三块专有的地址，作为私有的内部组网使用" class="headerlink" title="RFC1918规定了三块专有的地址，作为私有的内部组网使用"></a>RFC1918规定了三块专有的地址，作为私有的内部组网使用</h3><blockquote>
<p><strong>A类：</strong> 10.0.0.0—10.255.255.255 10.0.0.0&#x2F;8<br><strong>B类：</strong> 172.16.0.0—172.31.255.255 172.16.0.0&#x2F;12<br><strong>C类：</strong> 192.168.0.0—192.168.255.255 192.168.0.0&#x2F;16</p>
</blockquote>
<p>这三块私有地址本身是可路由的，只是公网上的路由器不会转发这三块私有地址的流量；当一个公司内部配置了这些私有地址后，内部的计算机在和外网通信时，公司的边界路由会通过NAT或者PAT技术，将内部的私有地址转换成外网IP，外部看到的源地址是公司边界路由转换过的公网IP地址，这在某种意义上也增加了内部网络的安全性。</p>
<h2 id="为啥需要防火墙"><a href="#为啥需要防火墙" class="headerlink" title="为啥需要防火墙"></a>为啥需要防火墙</h2><hr>
<p>我所使用的Debian如果要实现NAT功能，所利用的工具是大部分Linux发行版的防火墙————<strong>iptables</strong>。</p>
<blockquote>
<p>iptables是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的处理和转发。在大部分Linux发行版中，可以通过手册页或 man iptables 获取用户手册。通常iptables需要内核模块支持才能运行，此处相应的内核模块通常是Xtables。因此，iptables操作需要超级用户权限，其可执行文件通常位于&#x2F;sbin&#x2F;iptables或&#x2F;usr&#x2F;sbin&#x2F;iptables。同时，需要说明的是，以上命令通常只用于处理IPv4数据包；而对于IPv6数据包，则使用类似的ip6tables命令。<a href="https://zh.wikipedia.org/wiki/Iptables">维基百科</a></p>
</blockquote>
<p>同时防火墙最大的功能是帮助你限制某些服务的存取来源，归纳一下即是以下三点：</p>
<ul>
<li>切割被信任与不信任的网段；</li>
<li>划分出可提供网络的服务与必须受保护的服务；</li>
<li>分析出可接受与不可接受的分包状态；</li>
</ul>
<p>即能保护自己又能提供网络地址转换，为啥不用呢！</p>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><hr>
<ul>
<li><strong>2019.07.19</strong> 初稿，添加前言</li>
<li><strong>2019.07.20</strong> 成稿</li>
<li><strong>2019.09.10</strong> 格式调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划02 Debian安装及配置基础路由功能</title>
    <url>/2019/07/20/linux-router-02-install-debian-and-configure-forward/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>现在就开始建立自己的Linux路由吧，我将会根据情况将这一过程划分成及部分进行说明，每个部分实现一个或多个主要功能，并给出一些个人建议，此教程并不适合所有人，但我希望能给大家启发。</p>
<span id="more"></span>

<h2 id="视频说明"><a href="#视频说明" class="headerlink" title="视频说明"></a>视频说明</h2><hr>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6AH0ccrt02o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>补上遗漏的防火墙固化部分：</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/bRMD029150U" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><hr>
<p>本教程将以Debian为基础，在ESXI提供的虚拟平台上实现一个带有翻墙功能的路由系统，由于自己是一个懒癌晚期患者，故暂时不会提供一键脚本来实现此功能。我希望通过我一步步的操作，让大家对整个Linux路由有比较完整的认识，本期将演示下述内容：</p>
<ul>
<li>虚拟机建立，及配置说明；</li>
<li>Debian安装注意点；</li>
<li>网卡配置，内外网划分；</li>
<li>开启转发，实现基础路由功能；</li>
</ul>
<h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><hr>
<ul>
<li>虚拟机（本例以ESXI为配置平台，如果有实体机并带有两个网卡的话也是可以的，此处不涉及到基于VLAN的单臂路由）</li>
<li>Debian9.x光盘镜像（由于计划分配的内存较少，此处使用32位镜像）</li>
<li>SSH工具（如果是Win10的话可能只需要一个CMD即可）</li>
<li>一个梯子</li>
</ul>
<h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><hr>
<h3 id="下载Debian镜像"><a href="#下载Debian镜像" class="headerlink" title="下载Debian镜像"></a>下载Debian镜像</h3><hr>
<p>虽然Debian10正式版已经发布了，考虑到源同步的问题，还是使用Debian9版本比较靠谱，并且考虑到分配的内存只有256M，我选用了32位系统镜像（<strong>相信今后大部分Linux发行版都将舍弃32位系统，不过现在对我的影响不大</strong>），当然如果你想用64位的系统也是可以的，内存稍微分配大点即可；由于在官网提供的是最新的版本，故我们要去别的地方下载。</p>
<p>Debian老版本下载网站请点击<a href="http://cdimage.debian.org/cdimage/archive/">这里</a>，一直向下滚就可以看到我们需要的Debian9.9。</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/01.png" class="" title="download debian 9 01">

<p>点击我框出的位置，然后点击i386（此处表示32位系统），如下图所示：</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/02.png" class="" title="download debian 9 02">

<p>选择iso-cd，安装是会自动下载一些安装包，如果网络不是很好的话也可以选择iso-dvd，dvd版本会集成大部分需要用到的组件；</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/03.png" class="" title="download debian 9 03">

<p>随后即可点击你所需要的镜像了，我选择了netinst版本，即在安装的过程中会自动下载组件包的版本；</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/04.png" class="" title="download debian 9 04">

<p>当然，如果你懒得自己去找下载地址，我也会提供相应的下载链接（方便大家一下吧！）：</p>
<h4 id="Debian9-9-0-下载链接"><a href="#Debian9-9-0-下载链接" class="headerlink" title="Debian9.9.0 下载链接"></a>Debian9.9.0 下载链接</h4><blockquote>
<p>如果通过多线程下载软件如<a href="https://www.internetdownloadmanager.com/">IDM</a>依然速度不理想的话，建议还是通过<a href="https://zh.wikipedia.org/wiki/BitTorrent_(%E5%8D%8F%E8%AE%AE)">BT</a>下载比较好</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">32 or 64</th>
<th align="center">下载地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">32</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/bt-cd/debian-9.9.0-i386-netinst.iso.torrent">bt-cd</a></td>
</tr>
<tr>
<td align="center">32</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/bt-dvd/debian-9.9.0-i386-DVD-1.iso.torrent">bt-dvd1</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/bt-dvd/debian-9.9.0-i386-DVD-2.iso.torrent">bt-dvd2</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/bt-dvd/debian-9.9.0-i386-DVD-3.iso.torrent">bt-dvd3</a></td>
</tr>
<tr>
<td align="center">32</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/iso-cd/debian-9.9.0-i386-netinst.iso">iso-cd</a></td>
</tr>
<tr>
<td align="center">32</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/iso-dvd/debian-9.9.0-i386-DVD-1.iso">iso-dvd1</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/iso-dvd/debian-9.9.0-i386-DVD-2.iso">iso-dvd2</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/i386/iso-dvd/debian-9.9.0-i386-DVD-3.iso">iso-dvd3</a></td>
</tr>
<tr>
<td align="center">64</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/bt-cd/debian-9.9.0-amd64-netinst.iso.torrent">bt-cd</a></td>
</tr>
<tr>
<td align="center">64</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/bt-dvd/debian-9.9.0-amd64-DVD-1.iso.torrent">bt-dvd1</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/bt-dvd/debian-9.9.0-amd64-DVD-2.iso.torrent">bt-dvd2</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/bt-dvd/debian-9.9.0-amd64-DVD-3.iso.torrent">bt-dvd3</a></td>
</tr>
<tr>
<td align="center">64</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/iso-cd/debian-9.9.0-amd64-netinst.iso">iso-cd</a></td>
</tr>
<tr>
<td align="center">64</td>
<td align="center"><a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/iso-dvd/debian-9.9.0-amd64-DVD-1.iso">iso-dvd1</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/iso-dvd/debian-9.9.0-amd64-DVD-2.iso">iso-dvd2</a>&#x2F;<a href="http://cdimage.debian.org/cdimage/archive/9.9.0/amd64/iso-dvd/debian-9.9.0-amd64-DVD-3.iso">iso-dvd3</a></td>
</tr>
</tbody></table>
<h3 id="ESXI配置虚拟机"><a href="#ESXI配置虚拟机" class="headerlink" title="ESXI配置虚拟机"></a>ESXI配置虚拟机</h3><hr>
<blockquote>
<p>使用ESXI已经很多年了，相对而言配置更加得心应手，当然其他的虚拟化工具也是可以使用的，本次主要以ESXI为例，希望大家不要吐槽。</p>
</blockquote>
<p>那就开始吧！</p>
<h4 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h4><p>将下载好的镜像上传至ESXI的内部存储中，等会安装虚拟机需要用到的；</p>
<h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>家里原有的网络结构暂时不想改变，利用ESXI的虚拟网卡，这次我新建一个网络，在这个网络中进行调试，不影响我原有的网络结构；</p>
<p>网络结构及网段划分</p>
<h5 id="ROS—-172-16-1-0-x2F-24—-Linux-Router—-192-168-100-0-x2F-24—-Manjaro"><a href="#ROS—-172-16-1-0-x2F-24—-Linux-Router—-192-168-100-0-x2F-24—-Manjaro" class="headerlink" title="ROS—-172.16.1.0&#x2F;24—-Linux Router—-192.168.100.0&#x2F;24—-Manjaro"></a>ROS—-172.16.1.0&#x2F;24—-Linux Router—-192.168.100.0&#x2F;24—-Manjaro</h5><blockquote>
<p>家中的主路由是RouterOS，内网网段是172.16.1.0&#x2F;24，计划将这台Linux Router的WAN口配置为172.16.1.50&#x2F;24，LAN口配置为192.168.100.1&#x2F;24，连接在LAN的设备所处网段是192.168.100.0&#x2F;24，我将利用上次做演示的Manjaro做接入，到时候看看效果如何。</p>
</blockquote>
<p>配置网络也很简单，进入 <strong>配置—-网络—点击右上角的添加网络向导</strong> ，然后就可以添加新的网络了；</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/05.png" class="" title="configure network 01">

<ul>
<li>连接类型选择虚拟机</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/06.png" class="" title="configure network 02">

<ul>
<li>创建vSphere标准交换机（此处我并没有选择物理网卡，我直接使用内部通讯虚拟出一个网络交换机）</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/07.png" class="" title="configure network 03">

<ul>
<li>给新建的网络起个名字</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/08.png" class="" title="configure network 04">

<ul>
<li>直接点击完成，之后就可以看到网络中新出现的标准交换机</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/09.png" class="" title="configure network 05">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/10.png" class="" title="configure network 06">

<ul>
<li>随后点击新的标准交换机的属性，进行编辑，在安全选项卡中启用混杂模式，此时会提示没有物理网卡，不用管，直接确定</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/11.png" class="" title="configure network 07">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/12.png" class="" title="configure network 08">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/13.png" class="" title="configure network 09">

<p>至此新的网络的配置就完成了。</p>
<h4 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h4><ul>
<li>新建虚拟机，由于我使用的是6.0版本，ESXI上没有Debian9的虚拟机类型，那就选择Debian8吧，问题不大</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/14.png" class="" title="configure vm 01">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/15.png" class="" title="configure vm 02">

<ul>
<li>选择两个处理器，内存就用原计划的256M吧</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/16.png" class="" title="configure vm 03">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/17.png" class="" title="configure vm 04">

<ul>
<li>网卡选择两块，VM Network对应172.16.1.0&#x2F;24网段，作为Linux Router的WAN口，Linux router对应192.168.100.0.24网段，作为LAN口，硬盘直接使用默认配置，16G足矣</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/18.png" class="" title="configure vm 05">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/19.png" class="" title="configure vm 06">

<ul>
<li>以上结束之后记得勾选上完成前编辑虚拟机设置</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/20.png" class="" title="configure vm 07">

<ul>
<li>在编辑界面需要修改两个位置，移除软盘，添加ISO镜像到虚拟光驱，并且勾选上打开电源是连接，如下图所示</li>
</ul>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/21.png" class="" title="configure vm 08">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/22.png" class="" title="configure vm 09">

<blockquote>
<p>至此虚拟机的前期配置就搞了，如果使用6.5或者6.7版本的ESXI，在网页上配置基本上也类似</p>
</blockquote>
<h4 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h4><p>在ESXI中安装虚拟机应该不难，Debian9的安装也很简单，大致上过去在Hyper-V上安装Ubuntu一样，为了节省时间，我就直接忽略这部分了（希望大家不要打我），只不过为了有效利用256M的内存，需要在组件选择的时候稍微调整一下，如下图所示：</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/25.png" class="" title="install vm">

<blockquote>
<p>需要取消掉桌面环境和打印服务组件，启用ssh服务，桌面的环境肯定会消耗不小的性能，而打印机我觉得作为二级路由暂时还用不到，用不到就不浪费空间来安装了，然后启用SSH的话就可以远程进行管理了</p>
</blockquote>
<h3 id="正式配置"><a href="#正式配置" class="headerlink" title="正式配置"></a>正式配置</h3><hr>
<h4 id="1-安装Open-vm-tool组件"><a href="#1-安装Open-vm-tool组件" class="headerlink" title="1.安装Open-vm-tool组件"></a>1.安装Open-vm-tool组件</h4><p>安装Open-vm-tool之后会比较方便的进行虚拟机开关机和重启，安装也很简单</p>
<p>首先需要点击控制台上的虚拟机选项——客户机—— <strong>安装&#x2F;升级VMware Tools</strong>，中间会跳出几个对话框，不用管，直接确定</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/26.png" class="" title="configure debian 01">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/27.png" class="" title="configure debian 02">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/28.png" class="" title="configure debian 03">

<p>之后在控制台中执行下述命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt #挂载光驱至mnt目录下</span><br><span class="line">cd /mnt &amp;&amp; cp VMwareTools-10.2.5-8068406.tar.gz /tmp #此处的VMwareTools的版本会随着ESXI版本的不同而不同，多使用Tab键补全命令</span><br><span class="line">cd /tmp</span><br><span class="line">tar xzf VMwareTools-10.2.5-8068406.tar.gz #将刚刚复制的压缩包解压</span><br><span class="line">cd vmware-tools-distrib/ #进入刚刚解压出来的压缩包目录</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>此处即可看到安装组件的脚本</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/29.png" class="" title="configure debian 04">

<p>直接执行 <code>./vmware-install.pl</code> 即可，此处会进入交互安装模式，除了第一个需要回答之外，其它的基本上一路回车即可，此处直接输入y并回车</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/30.png" class="" title="configure debian 05">

<p>安装完成之后就可以在ESXI的摘要界面上看到虚拟机此时使用的IP地址了，出现这个就说明安装成功并正常运行了</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/31.png" class="" title="configure debian 06">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/32.png" class="" title="configure debian 07">

<h4 id="2-安装基础软件及配置环境"><a href="#2-安装基础软件及配置环境" class="headerlink" title="2.安装基础软件及配置环境"></a>2.安装基础软件及配置环境</h4><blockquote>
<p>此处安装的软件并不是必须的，但可以提升Linux的操作便利性（<strong>只用命令行还谈什么便利性</strong>），我一般会执行这样的命令</p>
</blockquote>
<p><code>apt-get install vim htop lrzsz git mlocate tmux -y</code></p>
<p>当然，由于使用了中文语言环境，在控制台上显示的中文都是方块，还是用SSH配置比较好</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/34.png" class="" title="configure debian 08">

<p>之后再调整一下快捷命令，执行如下命令 <code>vi ~/.bashrc</code> ，此处的 <strong>~</strong> 表示的是用户家目录，类似于Windows上Administrator目录，里面存放着用户的个人文件和配置， <strong>.</strong> 表示隐藏的文件</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/36.png" class="" title="configure debian 09">

<p>将上述的内容修改成如下所示</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/37.png" class="" title="configure debian 10">

<p>这些内容主要是让文件进行彩色显示，同时设置一些快捷命令，比如“ll”就相当于执行了“ls -l”，有兴趣的可以对比一下这些命令的差异，保存并退出之后，执行 <code>source ~/.bashrc</code> 即可应用上面的那些修改</p>
<h4 id="3-修改SSH用密码登录"><a href="#3-修改SSH用密码登录" class="headerlink" title="3.修改SSH用密码登录"></a>3.修改SSH用密码登录</h4><p>如果要使用SSH登陆的话需要修改一下SSH的配置文件，此处执行 <code>vi /etc/ssh/sshd.config</code> ，找到这个位置</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/38.png" class="" title="configure debian 11">

<p>修改成如下内容即可</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/39.png" class="" title="configure debian 12">

<p>之后执行 <code>systemctl restart sshd</code> 重启一下服务就可以应用修改了</p>
<h4 id="4-配置网卡地址"><a href="#4-配置网卡地址" class="headerlink" title="4.配置网卡地址"></a>4.配置网卡地址</h4><p>按照原定的计划，虚拟机的两张网卡分别配置成WAN口和LAN口，此处执行 <code>ip a</code> 查看网卡名，<strong>ens192</strong> 将作为WAN口， <strong>ens224</strong> 作为LAN口</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/40.png" class="" title="configure debian 13">

<p>网卡的配置文件是“&#x2F;etc&#x2F;network&#x2F;interface”,直接执行 <code>vi /etc/network/interface</code> 进行编辑，下面的是我的配置，除了IP，网关等信息外，我还使用 <strong>auto</strong> 替换了 <strong>allow-hotplug</strong> ，确保在系统启动时候无论网卡处在何种状态都启用网卡</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/55.png" class="" title="configure debian 14">

<p>直接执行 <code>systemctl restart networking</code> ，然后通过 <code>ip a</code> 查看网卡情况，配置的网卡信息就已经生效了</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/42.png" class="" title="configure debian 15">

<p>之后就可以通过SSH工具进行连接了，此处我选择了<a href="https://www.netsarang.com/zh/xshell/">Xshell</a>,使用个人和学生版即可，商业版是需要收费的</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/43.png" class="" title="configure debian 16">

<h4 id="5-开启转发并配置iptables"><a href="#5-开启转发并配置iptables" class="headerlink" title="5.开启转发并配置iptables"></a>5.开启转发并配置iptables</h4><blockquote>
<p>Linux如果要成为一台路由器，必须先开启转发的功能</p>
</blockquote>
<p> <code>vi /etc/sysctl.conf</code>对 <strong>sysctl.conf</strong> 文件进行编辑，定位到如下位置</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/46.png" class="" title="configure debian 17">

<p>删除此行前面的 <strong>#</strong> 符号，然后保存，执行 <code>sysctl -p</code> 即可生效，并且重启也不会受到影响</p>
<hr>
<p>接下来就是重头戏了，iptables命令，此处就不深入进行讲解了，如果大家有兴趣我会更新一下这方面的知识</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置iptables配置</span></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -X</span><br><span class="line">iptables -t mangle -F</span><br><span class="line">iptables -t mangle -X</span><br><span class="line">iptables -t raw -F</span><br><span class="line">iptables -t raw -X</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转发两块网卡之间的数据</span></span><br><span class="line">iptables -A FORWARD -i ens224 -s 192.168.100.0/24 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i ens192 -d 192.168.100.0/24 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源地址伪装，将所有内网的地址全部伪装成WAN口的地址，所有数据包都修改了来源的地址，这里是172.16.1.50/24</span></span><br><span class="line">iptables -t nat -A POSTROUTING -o ens192 -j MASQUERADE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启必要的端口和策略，此处开启WAN口的SSH端口</span></span><br><span class="line">iptables -I INPUT 1 -i lo -j ACCEPT</span><br><span class="line">iptables -I INPUT 1 -i ens224 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -i ens192 -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置默认的防火墙规则，防火墙一般都是以先允许后阻止这样的原则进行配置的，并且防火墙的规则是从上而下依次进行匹配的，需要开放的规则必须要放在阻止的规则上面，此处就是最后的阻止部分</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>

<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/47.png" class="" title="configure debian 18">

<p>配置完上述命令之后，路由功能基本上就实现了</p>
<h4 id="6-实测"><a href="#6-实测" class="headerlink" title="6.实测"></a>6.实测</h4><p>口说无凭，还是拿出点证据来吧！我这次就用上次演示的Manjaro虚拟机吧，修改网络连接，使用最新建立的那个网卡</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/48.png" class="" title="configure debian 19">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/49.png" class="" title="configure debian 20">

<p>同时修改一下虚拟机的网卡地址，此次我只是配置了路由，DHCP和DNS功能并没有配置，所以需要手动指定，将网络设置为192.168.100.10，和 <strong>ens224</strong> 网卡同一个网段，网关直接指向 <strong>ens224</strong> 的地址，DNS就是用最常用的114.114.114.114吧</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/50.png" class="" title="configure debian 21">

<p>先ping一下看看通不通</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/51.png" class="" title="configure debian 22">

<p>就用<a href="https://www.bilibili.com/">B站</a>验证一下吧</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/52.png" class="" title="configure debian 23">
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/53.png" class="" title="configure debian 24">

<p>右侧显示的是 <strong>ens224</strong> 的流量信息，看1080P的视频一点问题都没有（原谅我Manjaro的性能有点差，4K是跑不动了）</p>
<h4 id="7-iptables规则固化"><a href="#7-iptables规则固化" class="headerlink" title="7.iptables规则固化"></a>7.iptables规则固化</h4><p>Debian的iptables不会开机启动，如果不进行一些操作的话，一重启一开始配置的iptables规则就会失效，路由功能就废了，为了解决这个问题，需要在开机的时候就加载iptables规则</p>
<p>执行<code>cd /etc/network</code>打开network目录，此时在这个目录下有如下几个文件</p>
<img src="/2019/07/20/linux-router-02-install-debian-and-configure-forward/54.png" class="" title="configure debian 22">

<p>每个文件对应的功能如下：</p>
<table>
<thead>
<tr>
<th align="center">文件名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">if-down.d</td>
<td align="center">网卡关闭时执行动作</td>
</tr>
<tr>
<td align="center">if-post-down.d</td>
<td align="center">网卡关闭后执行动作</td>
</tr>
<tr>
<td align="center">if-pre-up.d</td>
<td align="center">网卡启动前执行动作</td>
</tr>
<tr>
<td align="center">if-up.d</td>
<td align="center">网卡启动时执行动作</td>
</tr>
<tr>
<td align="center">interface</td>
<td align="center">网卡配置信息</td>
</tr>
<tr>
<td align="center">interface.d</td>
<td align="center">网卡扩展配置</td>
</tr>
</tbody></table>
<p>此处需要用到两个目录，<strong>if-pre-up.d</strong> 和 <strong>if-post-down.d</strong>  ，我需要写两个脚本，分别在网卡开启前导入iptables规则和在网卡关闭后自动保存iptables规则，看似功能很“高级”，但实际上实现非常简单</p>
<p>在<strong>if-post-down.d</strong>目录中新建一个文件，<code>vi /etc/network/if-post-down.d/iptables</code>，然后输入如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/sbin/iptables-save &gt; /etc/iptables/rule.v4 #将iptables规则保存至/etc/iptables目录下的rule.v4文件中</span><br></pre></td></tr></table></figure>

<p>同样的在<strong>if-pre-up.d</strong>目录中新建一个文件，<code>vi /etc/network/if-pre-up.d/iptables</code>并输入如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/sbin/iptables-restore &lt; /etc/iptables/rule.v4 #将/etc/iptables/rule.v4中的iptables配置导入系统</span><br></pre></td></tr></table></figure>

<p>以上的操作即可在系统重启时自动保存iptables规则，并开机加载</p>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><hr>
<ul>
<li><strong>2019.07.21</strong> 下载镜像及配置虚拟机网络</li>
<li><strong>2019.07.26</strong> 完成主体内容</li>
<li><strong>2019.07.28</strong> 增加重启后加载iptables的方法</li>
<li><strong>2019.07.29</strong> 修正部分错误</li>
<li><strong>2019.08.11</strong> 嵌入视频说明</li>
<li><strong>2019.09.10</strong> 格式调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划03 配置DNS和DHCP</title>
    <url>/2019/07/26/linux-router-03-DNS-and-DHCP/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>上一篇文章中我将Linux配置成了一台路由器，并进行了演示，但当时由于没有配置DHCP和DNS，我只能手动的对客户机的网卡进行配置，手动的添加了IP，子网掩码，网关地址以及DNS，这期我将记录下我是如何搭建DNS和DHCP的，让所有接入的网络设备自由的获取IP，当然在此之前，一定要先把Linux的路由功能给搭建起来，否则做这些好像就没有多大意义了。</p>
<span id="more"></span>

<h2 id="搭建方案"><a href="#搭建方案" class="headerlink" title="搭建方案"></a>搭建方案</h2><hr>
<blockquote>
<p>Linux上的工具很多，不同的人有不同的搭建方案，这次我将使用两个方案来实现DNS和DHCP的功能，他们分别是dnsmasq和AdGuard Home+dhcpd，两个方案搭建起来都比较简单，稍微修改一下配置文件即可</p>
</blockquote>
<ul>
<li><p>方案一：<br><a href="https://wiki.archlinux.org/index.php/Dnsmasq_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">dnsmasq</a>是一款轻量化的DNS服务器，当然它的功能还不止这些，还能提供DHCP和PXE网络启动，对于家里这种比较小型的局域网，用它简直太合适了</p>
</li>
<li><p>方案二：<br><a href="https://adguard.com/zh_cn/adguard-home/overview.html">AdGuard Home</a>是AdGuard公司开源的一款使用Go语言开发的DNS服务器软件，支持家长控制和广告过滤，关键还支持<a href="https://zh.wikipedia.org/wiki/DNS_over_TLS">DNS over TLS</a>，对于部署环境还不怎么挑剔；配置简单，并且它自身还能提DHCP服务，那就直接用它吧！</p>
</li>
</ul>
<h2 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h2><hr>
<blockquote>
<p>由于我是懒人，懒得多搭建几个测试环境，那就利用虚拟机的快照功能建立一个恢复点吧，不仅可以防止配置出错，还能多折腾几种方案，哪种方案靠谱就删掉其它的还原点就可以了</p>
</blockquote>
<h3 id="建立快照"><a href="#建立快照" class="headerlink" title="建立快照"></a>建立快照</h3><hr>
<p>直接在 控制台——虚拟机——快照——生成快照</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/01.png" class="" title="快照01">

<p>然后给这个快照起个名字，写点说明，等它建立好就行了</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/02.png" class="" title="快照02">

<p>好了，前期的准备就结束了，进行下一步</p>
<hr>
<h3 id="利用dnsmasq搭建"><a href="#利用dnsmasq搭建" class="headerlink" title="利用dnsmasq搭建"></a>利用dnsmasq搭建</h3><hr>
<h4 id="安装dnsmasq"><a href="#安装dnsmasq" class="headerlink" title="安装dnsmasq"></a>安装dnsmasq</h4><p><strong>dnsmasq</strong>已经内置在debian的软件源之中，安装起来非常简单，直接执行<code>apt-get install dnsmasq -y</code>即可，之后系统会直接进行安装，并将启动文件，配置文件等项目创建好了，开机自启也添加到了启动项</p>
<h4 id="dnsmasq的配置文件"><a href="#dnsmasq的配置文件" class="headerlink" title="dnsmasq的配置文件"></a>dnsmasq的配置文件</h4><p>接下来要做的主要就是修改<strong>dnsmasq</strong>的配置文件，配置文件主要是<code>/etc/dnsmasq.conf</code>和<code>/etc/dnsmasq.d</code>目录，前面一个是主配置文件，后面的那个目录属于扩展配置，当然为了管理更加方便，此处我会使用扩展配置的方式进行设置，但是默认情况下<strong>dnsmasq</strong>并不会调用<code>/etc/dnsmasq.d</code>中的配置文件，为了解决这个问题，需要在主配置文件中修改一个参数，<code>vi /etc/dnsmasq.conf</code>打开配置文件，移动到文件末尾，删除<code>conf-dir=/etc/dnsmasq.d/,*.conf</code>前的 <strong>#</strong> 符号，之后保存退出，这样<strong>dnsmasq</strong>就会自动进入 <strong>&#x2F;etc&#x2F;dnsmasq.d</strong> 目录中查找配置文件</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/05.png" class="" title="dnsmasq 01">

<p>之后就可以进入 <strong>&#x2F;etc&#x2F;dnsmasq.d</strong> 目录中进行相关的配置了，在我的服务器上，我对每个功能设置了一个配置文件，如图：</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/06.png" class="" title="dnsmasq 02">

<blockquote>
<p>这里先不讨论这些配置文件分别对应什么功能，这样做只是为了更方便配置，哪个功能出现了问题就配置对应的文件，考虑到今后功能会越来越多，配置会越来越复杂，这种方式相比于一个文件解决一堆问题会有条理很多（没办法，男人对于自己电脑有种莫名的强迫症）</p>
</blockquote>
<p>现在需要让<strong>dnsmasq</strong>实现DNS和DHCP的功能，那就创建两个配置文件吧！此处如图：</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/07.png" class="" title="dnsmasq 03">

<h4 id="配置DNS功能"><a href="#配置DNS功能" class="headerlink" title="配置DNS功能"></a>配置DNS功能</h4><p>实现DNS功能其实非常简单，打开配置文件，<code>vi /etc/dnsmasq.d/dns.conf</code>，输入下述内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen-address=127.0.0.1,192.168.100.1 #监听本地和192.168.100.1两个地址，主要提供本机和LAN口的DNS服务</span><br><span class="line">no-resolv #不使用/etc/resolv.conf中的DNS服务器，后面server选项已经指定了上级服务器，故不需要用到系统网卡配置的DNS</span><br><span class="line">cache-size=1000 #保留1000个缓存地址，提高解析的速度，特别是有污染的情况下</span><br><span class="line">server=114.114.114.114 #上级服务器，此处选择了国内很常用的114 DNS</span><br><span class="line">server=8.8.4.4 #同样的我也使用了谷歌的服务作为后备，这个根据实际的情况进行调整，当然，如果后期要做DNS防污染，此处配置同样重要</span><br><span class="line">clear-on-reload #重启后清除缓存</span><br></pre></td></tr></table></figure>

<p>轻量级DNS服务器的话，上述配置就足够了，接下来就是DHCP功能。</p>
<h4 id="配置DHCP功能"><a href="#配置DHCP功能" class="headerlink" title="配置DHCP功能"></a>配置DHCP功能</h4><p>在修改配置前，首先记录一下LAN口的网卡MAC地址，这个地址在后面的配置中需要用到，执行<code>ip a</code>即可查询到，此处查询到的MAC地址是<strong>00:0c:29:c4:0a:41</strong></p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/08.png" class="" title="dnsmasq 04">

<p>接下来执行<code>vi /etc/dnsmasq.d/dhcp.conf</code>，输入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">interface=ens224 #提供DHCP服务的网卡</span><br><span class="line">bind-interfaces #绑定网卡，防止对其它网卡的干扰</span><br><span class="line">dhcp-range=192.168.100.100,192.168.100.200,12h #地址分配范围及租用时间，我设置的是100～200这101个地址，实际上根本就用不了这么多，有效期12个小时，格式一定要注意，中间要用英文的逗号</span><br><span class="line">dhcp-host=00:0c:29:c4:0a:41,192.168.100.1 #DHCP网卡的信息，MAC地址及IP，此处为必要项</span><br><span class="line">dhcp-leasefile=/etc/dnsmasq.leases #保存DHCP的分配的主机和地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简单的DHCP功能只需要这些配置就足够了，感觉很高大上，其实需要修改的也就这么点东西，现在就不引入一些高阶的功能了，够用就行</p>
</blockquote>
<h4 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h4><ul>
<li>使用<code>dnsmasq --test</code>命令验证一下配置文件，如果没有问题的话会显示<code>dnsmasq: syntax check OK.</code></li>
</ul>
<hr>
<ul>
<li>重启一下<strong>dnsmasq</strong>来应用配置，<code>systemctl resatet dnsmasq</code>，验证一下状态，<code>systemctl status dnsmasq</code>，此处可以大致看到dnsmasq运行的状态，没问题的话按<strong>q</strong>退出</li>
</ul>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/09.png" class="" title="dnsmasq 05">

<hr>
<ul>
<li>使用验证依然使用Manjaro啦，打开虚拟机，修改一下网卡配置，从原来的手动指定修改为自动获取，DNS也改成自动，重启一下网卡之后就能自动获取到ip地址了</li>
</ul>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/10.png" class="" title="dnsmasq 06">
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/11.png" class="" title="dnsmasq 07">

<p>那如何验证不是我暗箱操作呢？直接在服务器上查看DHCP分配情况就可以了，查看对应的记录文件<code>cat /etc/dnsmasq.leases</code></p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/12.png" class="" title="dnsmasq 08">

<p>之后那就放个<a href="https://www.bilibili.com/bangumi/media/md1733">《罗小黑战记》</a>作为结尾吧，（等下，还有AdGuard Home呢，大家不要失去耐心啊～）</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/13.png" class="" title="dnsmasq 09">

<hr>
<h3 id="利用AdGuard-Home搭建"><a href="#利用AdGuard-Home搭建" class="headerlink" title="利用AdGuard Home搭建"></a>利用AdGuard Home搭建</h3><hr>
<h4 id="视频说明"><a href="#视频说明" class="headerlink" title="视频说明"></a>视频说明</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/Aez-j5dENaU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h5 id="安装AdGuard-Home"><a href="#安装AdGuard-Home" class="headerlink" title="安装AdGuard Home"></a>安装AdGuard Home</h5><p>进入AdGuard Home的<a href="https://github.com/AdguardTeam/AdGuardHome/releases">github</a>，根据自己的平台下载最新版，此处下载<a href="https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.97.1/AdGuardHome_linux_386.tar.gz">AdGuardHome_linux_386.tar.gz</a>，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.97.1/AdGuardHome_linux_386.tar.gz</span><br><span class="line">tar xzf AdGuardHome_linux_386.tar.gz</span><br><span class="line">cd AdGuardHome</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解压出来只有一个二进制文件<strong>AdGuardHome</strong>，这个就是程序的主体，不要觉得奇怪，真的只有这么一个文件</p>
</blockquote>
<p>好了，废话不多说，直接进行安装吧！<code>./AdGuardHome -s install</code>，安装很迅速，以瞬间就完成了，此时系统会提示监听的端口，默认它会监听所有的IP地址，监听端口默认是3000</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/14.png" class="" title="adguard 01">

<h4 id="对AdGuard-Home进行配置"><a href="#对AdGuard-Home进行配置" class="headerlink" title="对AdGuard Home进行配置"></a>对AdGuard Home进行配置</h4><p>直接在LAN口的Manjaro系统上打开浏览器进行配置，打开<a href="http://192.168.100.1:3000/">http://192.168.100.1:3000</a>，它会根据浏览器语言自动选择显示语言，由于我使用的FireFox是英文版，故显示的是英文，如果想要显示中文，直接在右下角选择简体中文即可</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/15.png" class="" title="adguard 02">
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/16.png" class="" title="adguard 03">

<p>直接点击开始配置之后会询问你使用哪个网卡进行监听以及使用的端口，这里我保持了默认的80端口作为网页管理的端口(不用输入后面端口号也是种懒症)，同样的53端口也保持默认，这个也是DNS查询的默认端口</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/17.png" class="" title="adguard 04">

<p>下一步之后就会要求你设置用户名和密码，这是登录网页管理需要用到的，根据自己的喜好进行设置吧！</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/19.png" class="" title="adguard 05">

<p>最终的页面会给出不同客户端需要怎样配置可以使用AdGuard Home提供的DNS服务(当然，后面配置了DHCP就不用管这些了)</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/20.png" class="" title="adguard 06">
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/21.png" class="" title="adguard 07">

<h4 id="AdGuard-Home功能说明"><a href="#AdGuard-Home功能说明" class="headerlink" title="AdGuard Home功能说明"></a>AdGuard Home功能说明</h4><blockquote>
<p>AdGuard Home主要提供DNS解析，广告过滤，家长控制，DHCP等功能，由于本次还不涉及到广告过滤和DNS防污染等功能，故并不会深入说明，只是会稍微提一下</p>
</blockquote>
<p>主界面，这上面会展示系统运行情况，客户端使用和DNS查询等情况，还是比较直观的</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/22.png" class="" title="adguard 08">

<p>在整个界面的上方提供多种配置选项，本次主要使用<strong>DNS settings</strong>和<strong>DHCP settings</strong></p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/23.png" class="" title="adguard 09">

<p><strong>常规设置</strong>提供大的解析功能，为了自由当然不要动啦！</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/24.png" class="" title="adguard 10">

<p><strong>DNS settings</strong>中提供上级DNS服务器的设置，由于AdGuard Home支持DNS_over_HTTPS等DNS解析加密技术，这里官方提供了<a href="https://www.cloudflare.com/">cloudflare</a>的加密解析地址（但是，GFW对此域名依然有污染，建议还是自建或者用别的非主流地址代替）</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/25.png" class="" title="adguard 11">

<p><strong>Encryption settings</strong>提供DNS_over_TLS的功能配置，可以将AdGuard Home配置成一台提供DNS加密解析的服务器，这个功能在内网中没有意义，比较适合放在国外的VPS主机上，为国内的用户提供干净的DNS解析支持</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/26.png" class="" title="adguard 12">

<p><strong>Client settings</strong>可以配置对每个用户提供不同服务，比如对某个主机设置家长控制，暂时用不到</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/27.png" class="" title="adguard 13">

<p><strong>DHCP settings</strong>配置DHCP功能，虽然还处在测试阶段，但经过测试，满足家中小局域网没有任何问题</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/28.png" class="" title="adguard 14">

<p><strong>过滤器</strong>可以配置广告过滤规则，可以直接添加<a href="https://adblockplus.org/">Adblock Plus</a>等浏览器过滤插件的规则，当然也可以进行手动配置，按需调整，此处不展开，后期会说明</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/29.png" class="" title="adguard 15">

<p><strong>查询日志</strong>将会显示DNS解析情况，会比较详细，由于还没使用，此处还是空的</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/30.png" class="" title="adguard 16">

<h4 id="配置AdGuard-Home-DNS功能"><a href="#配置AdGuard-Home-DNS功能" class="headerlink" title="配置AdGuard Home DNS功能"></a>配置AdGuard Home DNS功能</h4><p>AdGuard Home本身就已经开启了DNS功能，只不过默认使用的上级服务器是DNS_over_HTTPS的一个地址，所以要先将这个地址解析成正确的IP之后才能发起查询，在自身没有解析能力的情况下该怎么办呢？它引入了<strong>Bootstrap DNS 服务器</strong>，系统会先利用这个DNS对域名进行解析，然后再进行查询，这个设置项只针对使用了域名作为上级服务器的情况，默认使用的是1.1.1.1，GFW一直都DNS污染很上心，这次直接把这个地址屏蔽了，那被逼无奈只能换咯，暂时还不展示DNS防污染，那就先用114的吧，同样的在上级服务器中也加上114的地址，勾选<strong>通过同时查询所有上流服务器以使用并行查询查询加速解析</strong>，这个选项在多个上级服务器的情况下可以提升性能</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/33.png" class="" title="adguard 17">

<h4 id="开启AdGuard-Home-DHCP功能"><a href="#开启AdGuard-Home-DHCP功能" class="headerlink" title="开启AdGuard Home DHCP功能"></a>开启AdGuard Home DHCP功能</h4><p>AdGuard Home上的DHCP服务器还处于测试阶段，在配置过程中还是会出现点小状况，首先选择DHCP接口，因为要在LAN口上提供DHCP服务，那就选择<strong>ens224</strong>吧，网关地址就填写<strong>ens224</strong>的地址，后面的地址范围就输入你希望客户端能够获取的IP范围，我写了10～200这个范围。然后子网掩码就用255.255.255.0，租约时间不用管，当然你想时间长点也可以手动设置一下，之后保存一下配置，点击检查DHCP服务器，可能会遇到下面的错误</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/35.png" class="" title="adguard 18">

<blockquote>
<p>这个错误不用管，直接点击启用DHCP服务器即可</p>
</blockquote>
<p>如果启动成功了就会在右下角显示通知</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/36.png" class="" title="adguard 19">

<h4 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h4><p>修改Manjaro的网卡配置，使用DHCP，成功获取到了IP地址</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/37.png" class="" title="adguard 20">

<p>同样的也可以在AdGuard Home上看到客户端信息</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/38.png" class="" title="adguard 21">

<p>稍微打开一些网页浏览一下就可以在AdGuard Home的仪表盘上看到一些统计信息</p>
<img src="/2019/07/26/linux-router-03-DNS-and-DHCP/39.png" class="" title="adguard 22">

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>解决了DNS和DHCP问题，Linux软路由已经可以正常使用了，当然，距离挂梯子还有一段路要走，希望大家在看了我的笔记之后能有所启发，如果能留言交流将更加好，好了，我们下期再见</p>
<h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><hr>
<ul>
<li><strong>2019.07.26</strong> 撰写初稿</li>
<li><strong>2019.07.29</strong> 完成dnsmasq配置部分</li>
<li><strong>2019.08.01</strong> 完成AdGuard Home配置</li>
<li><strong>2019.08.19</strong> 增加AdGuard Home视频说明部分</li>
<li><strong>2019.09.10</strong> 格式调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划04 配置AdGuard Home实现广告过滤及DNS防污染</title>
    <url>/2019/08/11/linux-router-04-AdGuard-Home-settings/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>上一篇教程中我分别使用dnsmasq和AdGuard Home实现了DNS和DHCP功能，如果只是实现这些功能，那它们就太Low了，这期内容将以AdGuard Home为例，利用其老本行，实现广告过滤及DNS防污染功能，特别是DNS防污染功能，对于后期的挂梯子至关重要，废话不多说，直接开始配置吧！</p>
<span id="more"></span>

<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><hr>
<p>对于Linux路由来说，找到一款合适的广告过滤工具并不容易，它本身不同于openwrt，拥有大量的插件提供无数功能，而对于Linux系统，虽然属于通用操作系统，openwrt也是由它衍生出来的，但通用和专用系统还是有很大差异的，就如同cpu一样，它再牛逼，干gpu的事情也不行，这样的比喻也许并不恰当，但也不是不能用是吧！</p>
<p>虽然openwrt上的一些工具已经有移植的版本，比如<strong>koolproxy</strong>，但这个并不是我今天所要讨论的重点，我选择了相对比较原始的过滤广告的方法，即DNS过滤，限制那些广告域名的解析，变相的屏蔽广告，效果可能没有那么好，但过滤个八九成广告还是问题不大的，关键一点是使用现有的工具就能做到。</p>
<p>当然，屏蔽广告很重要，防DNS污染也很重要哦，不要忘记初衷，搭建二级路由主要就是为了挂梯子了，获取到正确的IP至关重要，感谢<strong>GFW</strong>让我们感受到了DNS污染的牛逼，由于DNS协议太老旧了，污染它是成本的方法，甚至于我使用iptables配置一下都能劫持它，看吧，国家也是要考虑运营成本的啊，当然是选择便宜的大规模部署啦！所以使用常用的DNS服务地址都会被污染，比如常用的<strong>114.114.114.114</strong>，<strong>8.8.8.8</strong>等等，基本上都难逃污染，通过它们解析到的IP基本上都是不能用来翻墙的，都是错误的；连门牌号都搞错了，那如何才能找到你想要的东西呢，所以这是在建立梯子前必须解决的问题</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><hr>
<blockquote>
<p>AdGuard Home本身就是一款广告过滤工具，那广告过滤什么的就没啥压力了，同样的AdGuard Home还支持DNS_over_HTTPS和DNS_over_TLS等加密解析功能，利用这一点获取到正确的IP，就决定这样干，具体会不会有啥坑呢？先操作一下试试吧！</p>
</blockquote>
<p>AdGuard Home整个系统已经将你需要的功能都构建好了，该怎么用完全取决于你使用哪种过滤策略，使用哪种上级DNS地址查询正确的IP地址，下面是我所使用的规则及服务器：</p>
<p>推荐的广告过滤规则</p>
<table>
<thead>
<tr>
<th align="center">规则名</th>
<th align="center">规则地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">EasyList China</td>
<td align="center"><a href="https://easylist-downloads.adblockplus.org/easylistchina.txt">https://easylist-downloads.adblockplus.org/easylistchina.txt</a></td>
</tr>
<tr>
<td align="center">CJX’s EasyList Lite</td>
<td align="center"><a href="https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjxlist.txt">https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjxlist.txt</a></td>
</tr>
<tr>
<td align="center">EasyList</td>
<td align="center"><a href="https://easylist.to/easylist/easylist.txt">https://easylist.to/easylist/easylist.txt</a></td>
</tr>
</tbody></table>
<p>上游DNS服务器选择，AdGuard Home支持的服务器类型</p>
<table>
<thead>
<tr>
<th align="center">DNS类型</th>
<th align="left">可靠性分析</th>
<th align="center">推荐地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UDP_DNS</td>
<td align="left">常规的DNS查询方式，使用UDP明文传输，安全性差，易污染</td>
<td align="center">1.1.1.1，114.114.114.114，8.8.8.8，9.9.9.9</td>
</tr>
<tr>
<td align="center"><a href="https://zh.wikipedia.org/wiki/DNS_over_TLS">DNS_over_TLS</a></td>
<td align="left">默认使用853端口,使用TCP进行传输，相当于给DNS解析进行了加密，由于存在特定端口，容易被封锁（当然也可以使用443端口）</td>
<td align="center"><a href="tls://dns.adguard.com">tls://dns.adguard.com</a>,<a href="tls://dns.google">tls://dns.google</a></td>
</tr>
<tr>
<td align="center"><a href="https://zh.wikipedia.org/wiki/DNS_over_HTTPS">DNS_over_HTTPS</a></td>
<td align="left">为了反审查，DNS查询也需要加入混淆，将DNS查询伪装成HTTPS协议来欺骗GFW,这样就很难分辨哪些流量是正常的网络访问，哪些是DNS解析了，但是这样势必会造成时延增高</td>
<td align="center"><a href="https://cloudflare-dns.com/dns-query">https://cloudflare-dns.com/dns-query</a>,<a href="https://dns.google.com/resolve">https://dns.google.com/resolve</a>,<a href="https://sdns.233py.com/dns-query">https://sdns.233py.com/dns-query</a></td>
</tr>
<tr>
<td align="center">TCP_DNS</td>
<td align="left">使用TCP来代替UDP，同时使用非标准端口会较容易打开国外打不开的网站</td>
<td align="center"><a href="tcp://208.67.222.222:5353">tcp://208.67.222.222:5353</a>,<a href="tcp://208.67.220.220:5353">tcp://208.67.220.220:5353</a></td>
</tr>
<tr>
<td align="center"><a href="https://dnscrypt.info/stamps/">DNSCrypt</a></td>
<td align="left">一款小众的DNS查询系统，不同于现有DNS查询方式，但是协议特征明显，容易被识别，但现在GFW暂时没有对其进行大规模限制，在现有使用规模下它还是安全的</td>
<td align="center">建议自建<a href="https://github.com/jedisct1/dnscrypt-proxy">客户端</a></td>
</tr>
</tbody></table>
<p>推荐优先级 DNS_over_HTTPS &gt; DNS_over_TLS &gt; DNSCrypt &gt; TCP_DNS &gt; UDP_DNS</p>
<p>DNS_over_HTTPS最为首选，如果使用国外的话延迟就太高了，国内的话使用<a href="https://sdns.233py.com/">https://sdns.233py.com</a>提供的服务效果会好一点，如果自身技术水平较强的话，在周边国家采购vps自建也不错，比如在套路云上自建延迟会比较有优势</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><hr>
<blockquote>
<p>AdGuard Home基本上所有配置都可以在WEB界面进行配置，上期已经将基本的解析和DHCP配置好了，现在只需要调整可靠的上级DNS服务器和广告过滤规则即可</p>
</blockquote>
<h3 id="防DNS投毒"><a href="#防DNS投毒" class="headerlink" title="防DNS投毒"></a>防DNS投毒</h3><p>为了防污染，优先选择DNS_over_HTTPS，此处我使用了国内的<a href="https://sdns.233py.com/dns-query">https://sdns.233py.com/dns-query</a>，相比于国外的服务商来说，延迟上的优势简直可以秒杀一切了，当然如果你在本地自建也是一种比较高速的方法</p>
<img src="/2019/08/11/linux-router-04-AdGuard-Home-settings/14.png" class="" title="AdGuardHome 01">

<p>如果只有一个上游服务器的话，就不要勾选那个同时查询选项了，如果使用了国外的服务器，那建议多添加几个，并适当添加一个国内常用的DNS地址，并勾选同时查询选择，这样可以有效提高解析速度</p>
<h3 id="广告过滤规则"><a href="#广告过滤规则" class="headerlink" title="广告过滤规则"></a>广告过滤规则</h3><p>现有官方提供的规则并不一定适合国内使用，所以我取消了默认的勾选，并录入了三个上面推荐的规则地址</p>
<img src="/2019/08/11/linux-router-04-AdGuard-Home-settings/15.png" class="" title="AdGuardHome 02">

<p>添加规则很简单，直接点击左下角的添加规则按钮即可，此时会跳出如下对话框，给规则起个名，录入规则地址即可，如果你已经配置好上级DNS服务器，那么此时点击添加过滤器的话会有一段时间延迟，不要以为是系统出问题了，这是系统在解析域名地址并下载相应的规则，卡滞时间由规则大小和域名所指向服务器速度决定，如果没配置上级DNS服务器的话就会添加失败</p>
<img src="/2019/08/11/linux-router-04-AdGuard-Home-settings/16.png" class="" title="AdGuardHome 03">

<p>当然除了这些别人整理的规则集之外，自己也可以手动添加一些规则</p>
<img src="/2019/08/11/linux-router-04-AdGuard-Home-settings/17.png" class="" title="AdGuardHome 04">

<p>官方提供的范例如下</p>
<img src="/2019/08/11/linux-router-04-AdGuard-Home-settings/18.png" class="" title="AdGuardHome 05">

<p>高阶的正则表达式还玩不转，一些普通的规则语法还是可以尝试的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#x27;!&#x27;和&#x27;#&#x27;作为开头的话这一行就作为注释说明的部分，系统不会读取里面的内容，只会作为文本呈现出来</span><br><span class="line"></span><br><span class="line">||baidu.com^ 如果我添加这条规则的话，所有百度旗下的以baidu.com作为主域名的网站都会被屏蔽掉，记住不要忘记最后的那个&#x27;^&#x27;</span><br><span class="line"></span><br><span class="line">如果在||baidu.com^的前面加上&#x27;@@&#x27;，即@@||baidu.com^，这样的话所有百度旗下的网站都会被放行，不管他是不是广告</span><br><span class="line"></span><br><span class="line">如果需要屏蔽指定的网站的话，比如需要屏蔽百度首页，www.baidu.com，那么输入127.0.0.1 www.baidu.com即可，这样的话www.baidu.com这个域名就会解析为127.0.0.1，由于这是环回地址，自然就无法正常访问了</span><br></pre></td></tr></table></figure>

<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.08.11</strong> 成稿</li>
<li><strong>2019.08.12</strong> 随手写一点</li>
<li><strong>2019.08.13</strong> 添加部分链接</li>
<li><strong>2019.08.19</strong> 完善推荐列表</li>
<li><strong>2019.08.21</strong> 完成规则添加说明</li>
<li><strong>2019.09.10</strong> 格式调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划05 dnsmasq进阶配置</title>
    <url>/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>相比于AdGuard Home，我更喜欢使用dnsmasq，主要是因为他配置起来会更加随意，配置一些其他的工具可以实现很多进阶的功能，本篇文章主要是在DNS和DHCP的基础上进行增强的演示和说明，希望可以给大家一些灵感</p>
<span id="more"></span>

<h2 id="视频说明"><a href="#视频说明" class="headerlink" title="视频说明"></a>视频说明</h2><hr>
<iframe width="560" height="315" src="https://www.youtube.com/embed/kXPKnEC7MCc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h2><hr>
<blockquote>
<p>使用下述功能可以有效的增强挂梯子的效果，大家不妨尝试一下</p>
</blockquote>
<ul>
<li>DNS防污染</li>
<li>对接DNS_over_HTTPS和DNSCrypt客户端</li>
<li>解析分流（中国域名使用国内解析服务器进行解析，国外的使用国外的解析）</li>
<li>广告过滤（限于篇幅，本篇暂未收录，主要是通过Pi-hole实现）</li>
</ul>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><hr>
<h3 id="利用DNSCrypt-Proxy搭建无污染DNS服务器"><a href="#利用DNSCrypt-Proxy搭建无污染DNS服务器" class="headerlink" title="利用DNSCrypt-Proxy搭建无污染DNS服务器"></a>利用<a href="https://github.com/jedisct1/dnscrypt-proxy">DNSCrypt-Proxy</a>搭建无污染DNS服务器</h3><p>dnsmasq如果要作为一个DNS服务器存在，必须添加上级服务器，而此处添加的上级服务器将决定它能为下级客户端提供怎样的解析服务，上次做演示的时候使用了114.114.114.114和8.8.4.4这两个DNS服务器，如果大家看过上一篇文章的话，应该知道普通的DNS协议容易被投毒，为了获取的正确的没有被污染的地址，此处我将替换掉这两个地址，并利用DNSCrypt-Proxy搭建另一个DNS服务器</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/01.png" class="" title="dnsmasq 01">

<p>为啥需要两个服务呢，原因主要是dnsmasq可以提供缓存功能，而没有污染的DNSCrypt-Proxy用来解析地址的话延迟感人，如果每一次都交由它来进行解析的话那体验真心难受，在<a href="https://youtu.be/Aez-j5dENaU">Linux路由补完计划3</a>中的翻车现场就是因为DoH服务延迟太高造成的，所以在本地建立一个缓存可以弥补高延迟所带来的问题，同时也可以利用dnsmasq的一些其它的功能</p>
<h4 id="安装DNSCrypt-Proxy"><a href="#安装DNSCrypt-Proxy" class="headerlink" title="安装DNSCrypt-Proxy"></a>安装DNSCrypt-Proxy</h4><p>DNSCrypt可以加密和认证用户和 DNS 解析服务器之间的数据传输。IP 数据本身没有任何变化，DNScrypt 可以避免 DNS 查询欺骗，确保 DNS 相应来自选择的 DNS 服务器。而DNSCrypt-Proxy这是这个工具的本地化工具，而且它支持的平台还特别多，基本涵盖市面上大部分的平台</p>
<ul>
<li><strong>项目地址：</strong> <a href="https://github.com/jedisct1/dnscrypt-proxy">https://github.com/jedisct1/dnscrypt-proxy</a></li>
</ul>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/02.png" class="" title="dnsmasq 02">

<ul>
<li><p><strong>下载最新安装包：</strong> 由于使用的32系统，所以我下载了<a href="https://github.com/jedisct1/dnscrypt-proxy/releases/download/2.0.25/dnscrypt-proxy-linux_i386-2.0.25.tar.gz">i386</a>版本的</p>
</li>
<li><p><strong>安装过程：</strong></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入opt目录，我将把DNSCrypt-Proxy安装在这个目录下</span></span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载对应的压缩包</span></span><br><span class="line">wget https://github.com/jedisct1/dnscrypt-proxy/releases/download/2.0.25/dnscrypt-proxy-linux_i386-2.0.25.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将压缩包解压</span></span><br><span class="line">tar xzf dnscrypt-proxy-linux_i386-2.0.25.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压到的目录</span></span><br><span class="line">cd linux-i386</span><br></pre></td></tr></table></figure>

<p>当执行<code>ls</code>命令时，可以看到DNSCrypt-Proxy的构成很简单</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/04.png" class="" title="dnsmasq 03">

<p>使用这个目录下的执行文件就可以完成DNS服务器的安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成配置文件，利用模板文件来生成</span></span><br><span class="line">cp example-dnscrypt-proxy.toml dnscrypt-proxy.toml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过配置文件修改服务的监听端口</span></span><br><span class="line">vi dnscrypt-proxy.toml</span><br></pre></td></tr></table></figure>

<p>通过关键字搜索需要修改的项目</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/05.png" class="" title="dnsmasq 04">

<p>由于dnsmasq作为主服务器已经占用了53端口，为了避免程序出错，此处修改为5353，同时由于ipv6还没有在本项目中实施，所以也删除ipv6监听端口，修改完之后是这样的</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/06.png" class="" title="dnsmasq 05">

<p>保存并退出，继续执行下述的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将DNSCrypt-Proxy安装为服务</span></span><br><span class="line">./dnscrypt-proxy --service install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">./dnscrypt-proxy --service start</span><br></pre></td></tr></table></figure>

<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/07.png" class="" title="dnsmasq 06">

<p>此时DNSCrypt-Proxy就已经安装好了，并且已经添加了开机启动项</p>
<ul>
<li><strong>验证是否运行：</strong></li>
</ul>
<p>直接使用<code>htop</code>命令查看进程，DNSCrypt-Proxy进程已经正常运行</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/08.png" class="" title="dnsmasq 07">

<h4 id="替换dnsmasq上游DNS服务器"><a href="#替换dnsmasq上游DNS服务器" class="headerlink" title="替换dnsmasq上游DNS服务器"></a>替换dnsmasq上游DNS服务器</h4><p><code>vi /etc/dnsmasq.d/dns.conf</code>打开dns配置文件，将原来添加的114.114.114.114和8.8.4.4替换为127.0.0.1:5353，此处由于没有使用53端口作为监听口，所以必须手动指明端口号</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/09.png" class="" title="dnsmasq 08">

<p>执行<code>systemctl restart dnsmasq</code>即可生效</p>
<h4 id="选择DNS解析查询模式"><a href="#选择DNS解析查询模式" class="headerlink" title="选择DNS解析查询模式"></a>选择DNS解析查询模式</h4><p>DNSCrypt-Proxy不仅可以支持其自身的DNSCrypt协议，同时也支持通过DNS_over_HTTPS的方式来进行查询</p>
<p>选择哪种模式可以在配置文件中进行配置，<code>vi /opt/linux-i386/dnscrypt-proxy.toml</code></p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/10.png" class="" title="dnsmasq 09">

<p>默认情况下两种协议都是开启的，需要关闭哪种就将哪种后面的<code>true</code>改成<code>false</code>即可，同时重启一下服务即可<code>systemctl restart dnscrypt-proxy</code></p>
<h3 id="DNS查询分流"><a href="#DNS查询分流" class="headerlink" title="DNS查询分流"></a>DNS查询分流</h3><blockquote>
<p>虽然添加了DNSCrypt-Proxy作为上游服务器来解决DNS污染，但由于使用的加密公共服务器普遍都在国外，解析国内网站就比较蛋疼了，为了解决延迟问题，对国内的域名使用国内的解析服务器进行查询会比较靠谱</p>
</blockquote>
<p>利用<a href="https://github.com/felixonmars/dnsmasq-china-list">dnsmasq-china-list</a>这个项目来解决这个问题，作者收集了大量的国内网站域名，然后利用dnsmasq可以为域名指定解析服务器的功能来进行分流，如果一来，国外的域名通过DNSCrypt-Proxy进行解析，而国内的域名就通过指定的国内服务器进行解析，然后再依靠dnsmasq的缓存功能，体验会很好</p>
<h4 id="下载dnsmasq-china-list"><a href="#下载dnsmasq-china-list" class="headerlink" title="下载dnsmasq-china-list"></a>下载dnsmasq-china-list</h4><p>直接<code>git clone https://github.com/felixonmars/dnsmasq-china-list</code>拖取项目</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/11.png" class="" title="dnsmasq 10">

<p>进入目录后可以看到上述内容，这里需要用到的主要是<code>accelerated-domains.china.conf</code>,<code>google.china.conf</code>，<code>apple.china.conf</code>，<code>bogus-nxdomain.china.conf</code>这几个文件，分别对应国内域名，google在中国的服务域名，苹果在中国的域名以及运营商劫持ip地址</p>
<h4 id="使用dnsmasq-china-list"><a href="#使用dnsmasq-china-list" class="headerlink" title="使用dnsmasq-china-list"></a>使用dnsmasq-china-list</h4><p>根据官方的说明，可以直接执行<code>./install.sh</code>进行安装，而我想自己根据需要使用一些功能，所以使用手动安装，为了方便后期更新，此处我直接使用软链接的方式进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/dnsmasq-china-list/accelerated-domains.china.conf /etc/dnsmasq.d/accelerated-domains.china.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选</span></span><br><span class="line">ln -s /opt/dnsmasq-china-list/google.china.conf /etc/dnsmasq.d/google.china.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选</span></span><br><span class="line">ln -s /opt/dnsmasq-china-list/apple.china.conf /etc/dnsmasq.d/apple.china.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止在使用无效域名解析时被运营商劫持</span></span><br><span class="line">ln -s /opt/dnsmasq-china-list/bogus-nxdomain.china.conf /etc/dnsmasq.d/bogus-nxdomain.china.conf</span><br></pre></td></tr></table></figure>

<p>建立四个软链接，这样当我执行<code>git pull</code>进行拖取更新之后，相应的 “&#x2F;etc&#x2F;dnsmasq.d&#x2F;”目录下的配置也相应的进行更改了</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/12.png" class="" title="dnsmasq 11">

<p>之后重启dnsmasq服务即可生效<code>systemctl restart dnsmasq</code></p>
<h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><hr>
<p>执行<code>dig @127.0.0.1 www.youtube.com</code>验证一下，由于需要使用本地服务器进行解析，所以需要加上@127.0.0.1这一个参数，第一次解析如下</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/13.png" class="" title="dnsmasq 12">

<p>第二次解析结果，由于缓存的存在，解析时间已经变为了0</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/14.png" class="" title="dnsmasq 13">

<p>对比一下通过<a href="https://dns.google.com/">https://dns.google.com</a>得到的结果，基本上已经是同一个网段了，据此判断已经没有污染了</p>
<img src="/2019/08/22/linux-router-05-Dnsmasq-advanced-configuration/15.png" class="" title="dnsmasq 14">

<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul>
<li><strong>2019.08.22</strong> 初稿</li>
<li><strong>2019.08.23</strong> 添加内容</li>
<li><strong>2019.08.25</strong> 完成正文</li>
<li><strong>2019.09.10</strong> 添加视频说明</li>
<li><strong>2020.01.30</strong> 修正部分错误</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划06 广告屏蔽就是这么简单——Pi-hole篇</title>
    <url>/2019/08/29/linux-router-06-block-ads-with-pi-hole/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在上上期中我介绍了使用AdGuard Home来过滤广告的方法，今天我再推荐一款同样好用的本地DNS及广告过滤工具——<a href="https://pi-hole.net/">Pi-hole</a>，相比于AdGuard Home来说，Pi-hole诞生更早，一开始它是为树莓派开发的一款广告过滤工具，在许多开发者的努力下，它被发扬光大了，也正因为这款工具的诞生，让我在过去那段时间里能让自己的移动设备免受广告的侵扰，以至于至今我还把它当成主力的广告过滤工具在我的软路由上默默的为全家手机服务</p>
<span id="more"></span>

<h2 id="视频说明"><a href="#视频说明" class="headerlink" title="视频说明"></a>视频说明</h2><hr>
<iframe width="560" height="315" src="https://www.youtube.com/embed/OmjU_P3h1dQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="Pi-hole是什么"><a href="#Pi-hole是什么" class="headerlink" title="Pi-hole是什么"></a>Pi-hole是什么</h2><hr>
<p>Pi-hole的核心组件pihole-FTL实际上就是一个dnsmasq的分支，它相比于原版的dnsmasq在功能上有专门针对广告过滤的优化，它只是将过去需要手动进行的广告过滤规则进行了自动化配置；原版的dnsmasq可以通过address&#x3D;这样的配置进行广告屏蔽，如果广告域名较多的话，那配置起来简直让人抓狂，而Pi-hole作为一款好用的工具简化了广告过滤规则的配置过程，真乃懒人之福音</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/01.png" class="" title="pihole 01">

<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><hr>
<blockquote>
<p>由于Pi-hole的本质就是dnsmasq，为了不影响其正常的安装，在安装之前需要卸载掉本机已经安装的dnsmasq，这也是为什么我在上期视频中没有附加广告过滤部分的原因</p>
</blockquote>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>备份dnsmasq配置并将其卸载:</li>
</ul>
<p>执行命令<code>systemctl stop dnsmasq</code>将dnsmasq服务停止，之后就是将上次编写的配置文件给备份（实际上并不需要备份，基本上会自动生成），此处我使用<code>mv</code>命令，直接将整个目录重命名了，这样有两点好处：</p>
<p>1.备份</p>
<p>2.防止安装Pi-hole之后因为配置冲突造成启动失败</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/30.png" class="" title="pihole 02">

<p>此处实际上应该还要卸载，只是我忘记了，大家记得要执行下述命令来进行dnsmasq的卸载<code>apt-get autoremove dnsmasq -y</code></p>
<ul>
<li>安装必要的下载工具<strong>curl</strong></li>
</ul>
<p>安装Pi-hole的一键脚本需要用到，那就装呗，<code>apt-get install curl -y</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/31.png" class="" title="pihole 03">

<ul>
<li>配置代理</li>
</ul>
<p>感谢伟大的GFW，装个国外的软件真心好痛苦，还好咱有代理可以用，<code>export</code>命令走起</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/32.png" class="" title="pihole 04">

<h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><p>想要安装Pi-hole还是很简单的（这是现在，过去可是很坑的，动不动依赖就会出问题，当然大部分原因都是有伟大的GFW），官方直接提供了一键脚本</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/02.png" class="" title="pihole 05">

<p>根据官方给出的命令，执行就是了<code>curl -sSL https://install.pi-hole.net | bash</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/33.png" class="" title="pihole 06">

<p>如果不出意外的话，基本上都能顺利的进入配置界面</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><ul>
<li>在安装部分依赖之后，系统会自动进入配置的界面，如下图所示：</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/05.png" class="" title="pihole 07">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/06.png" class="" title="pihole 08">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/07.png" class="" title="pihole 09">

<blockquote>
<p>Pi-hole的一些说明之后就是正式的安装配置了</p>
</blockquote>
<ul>
<li>选择提供服务的网卡，此处是LAN口的<strong>ens224</strong></li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/08.png" class="" title="pihole 10">

<ul>
<li>选择上游服务器，现在图省事我直接使用了Google的，然后直接确定进入下一步</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/09.png" class="" title="pihole 11">

<ul>
<li>广告过滤的策略，先保持默认吧</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/10.png" class="" title="pihole 12">

<ul>
<li>选择IP类型，<strong>IPv4</strong> OR <strong>IPv6</strong>，现在<strong>IPv6</strong>还有很多问题，暂时就只用<strong>IPv4</strong>吧</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/11.png" class="" title="pihole 13">

<ul>
<li>确认一下网络设置情况，保证能够正常上网</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/12.png" class="" title="pihole 14">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/13.png" class="" title="pihole 15">

<ul>
<li>之后系统会询问是否需要安装web界面，小白必备，自然是需要的</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/14.png" class="" title="pihole 16">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/16.png" class="" title="pihole 17">

<ul>
<li>开启查询记录，此处我选择了记录全部内容</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/18.png" class="" title="pihole 18">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/19.png" class="" title="pihole 19">

<p>之后Pi-hole就会基于刚刚的配置开始自动安装，这期间需要下载一些组件，如果网络不好的话就有可能会失败，所以代理还是很有必要的</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/20.png" class="" title="pihole 20">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/24.png" class="" title="pihole 21">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/26.png" class="" title="pihole 22">

<p>接下来就进入最后的一部分配置，包括防火墙，登陆密码等</p>
<ul>
<li>配置防火墙（如果没有启用防火墙，这边可以随意），建议安装Pi-hole需要用到的防火墙规则，默认会打开其所需要用到的端口:<code>53</code>、<code>67</code>、<code>4711~4720</code>、<code>80</code></li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/27.png" class="" title="pihole 23">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/39.png" class="" title="pihole 24">

<ul>
<li>完成安装及显示登录密码，之后可以通过显示的登陆地址和登陆密码进行后台管理</li>
</ul>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/37.png" class="" title="pihole 25">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/38.png" class="" title="pihole 26">

<h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><hr>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>登陆地址在安装完之后会自动显示，其实就是两个网卡所对应的地址，默认直接输入<a href="http://ip/admin">http://ip/admin</a>即可进入界面，如果没有在IP后面加上<code>/admin</code>，那默认会进入如下界面：</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/40.png" class="" title="pihole 27">

<p>直接点击<code>Did you mean to go to the admin panel</code>即可进入后台界面，之后看到的就是基本的状态界面，上面可以直观的看到请求数，被拦截的查询等</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/41.png" class="" title="pihole 28">

<p>这个界面只是状态展示，如果要进行管理，需要登录进去，点击左侧的<strong>Login</strong>进行登录，密码在Pi-hole安装完之后已经显示在界面上了</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/45.png" class="" title="pihole 29">

<p>如果嫌自动生成的密码太难记，直接可以使用<code>pihole -a -p</code>命令进行修改，执行命令后输入两次新密码即可</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/44.png" class="" title="pihole 30">

<p>登陆之后所有功能都会在左侧显示，状态界面显示的内容也会更丰富</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/46.png" class="" title="pihole 31">

<h3 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h3><blockquote>
<p>Pi-hole的大部分功能配置都是在系统设置中调整的，点击左侧的<strong>Settings</strong>选项，出现系统配置的几个选项卡</p>
</blockquote>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/47.png" class="" title="pihole 32">

<ul>
<li><strong>上游DNS调整</strong></li>
</ul>
<p>选择<strong>DNS</strong>选项卡，在安装过程中我使用了谷歌的DNS服务器，此时我依然打算使用DNSCrypt-Proxy作为主要的上游服务器，取消谷歌的服务器的勾选，在**Custom 1(IPv4)**中填入DNSCrypt-Proxy的监听地址及端口，此处是<code>127.0.0.1#5353</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/48.png" class="" title="pihole 33">

<p>点击右下角的<strong>SAVE</strong>之后即可生效，同时在<code>/etc/dnsmasq.d/</code>目录下的配置文件也会出现相应的修改，由于pihole-FTL就是一个dnsmasq的增强版本，所以dnsmasq上使用的语法在它身上依然可以使用，<code>vi /etc/dnsmasq.d/01-pihole.conf</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/49.png" class="" title="pihole 34">

<blockquote>
<p>此处可以看到服务器部分已经是自定义的那个服务器地址了</p>
</blockquote>
<ul>
<li><strong>启用DHCP功能</strong></li>
</ul>
<p>选择<strong>DHCP</strong>选项卡，勾选<strong>DHCP server enabled</strong>，并配置好起始和结束的IP地址，当然，也不要忘记把网关地址设置正确，同样的，保存之后就可生效，相应的在<code>/etc/dnsmasq.d</code>目录下也会生成对应的配置文件</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/50.png" class="" title="pihole 35">

<p>此时DHCP功能的配置文件名是<code>02-pihole-dhcp.conf</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/51.png" class="" title="pihole 36">

<ul>
<li><strong>添加合理的广告过滤规则</strong></li>
</ul>
<p>点击<strong>Blocklists</strong>查看默认的广告过滤规则，这些广告过滤规则并不符合中国用户的使用习惯，此处我建议全部取消前面的勾选</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/52.png" class="" title="pihole 37">

<p>此处我推荐一个广告过滤规则的Github项目：<a href="https://github.com/neoFelhz/neohosts">neohosts</a></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/53.png" class="" title="pihole 38">

<p>项目提供的几种类型的规则地址，我主要推荐如下两个，这两个任选其一即可，具体的不同可以查看项目的说明</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/54.png" class="" title="pihole 39">

<p>直接复制规则的地址，填入<strong>Blocklists</strong>选项卡的规则地址位置，点击<strong>Save and Update</strong>使其生效即可</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/55.png" class="" title="pihole 40">

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/56.png" class="" title="pihole 41">

<blockquote>
<p>此时添加的规则已经可以满足轻量级的广告过滤需求了，当然，如果想要更加强力点的广告过滤能力，建议移植<a href="https://adblockplus.org/">Adblock plus</a>中的Easylistchina等规则，由于Pi-hole并不兼容Adblock plus的规则语法，所以只能移植其中收集到的广告域名，虽然功能上受限制了，但是也是对原有广告过滤功能的增强</p>
</blockquote>
<p>在<code>/opt</code>目录下新建一个脚本文件<code>adblock.sh</code>，输入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s -L https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt https://easylist-downloads.adblockplus.org/malwaredomains_full.txt https://easylist-downloads.adblockplus.org/fanboy-social.txt &gt; adblock.unsorted</span><br><span class="line"></span><br><span class="line">sort -u adblock.unsorted | grep ^\|\|.*\^$ | grep -v \/ &gt; adblock.sorted</span><br><span class="line"></span><br><span class="line">sed &#x27;s/[\|^]//g&#x27; &lt; adblock.sorted &gt; adblock.hosts</span><br><span class="line"></span><br><span class="line">rm adblock.unsorted adblock.sorted</span><br></pre></td></tr></table></figure>

<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/57.png" class="" title="pihole 42">

<p>保存并退出，然后执行<code>bash ./adblock.sh</code>，稍等片刻，之后就会生成一个包含大量域名的文件<code>adblock.hosts</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/58.png" class="" title="pihole 43">

<p>同样的在<strong>Blocklists</strong>中填写规则地址，由于<code>adblock.hosts</code>文件是本地文件，所以规则的地址需要变化一下，将<code>http(s)://</code>替换为<code>file://</code>，之后在后面跟上文件的完整路径即可，此处的规则地址是<code>file:///opt/adblock.hosts</code></p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/60.png" class="" title="pihole 44">

<ul>
<li><strong>DNS查询分流</strong></li>
</ul>
<p>这个功能在上一期中已经介绍过，在<code>/etc/dnsmasq.d</code>目录下引入<a href="https://github.com/felixonmars/dnsmasq-china-list">dnsmasq-china-list</a>的配置文件即可，这里我依然使用软链接的方式进行添加，添加完成之后直接执行<code>pihole restartdns</code>即可重启Pi-hole服务</p>
<img src="/2019/08/29/linux-router-06-block-ads-with-pi-hole/62.png" class="" title="pihole 45">

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>至此Pi-hole算是搭建完成了，虽然广告过滤是使用了DNS解析过滤的方式，效果并不是特别好，但好处是不会影响网速，相比于浏览器插件而言，各有优缺点吧！</p>
<p>如果想要自定义一些域名的处理方式的话，在左侧的<strong>Whitelist</strong>和<strong>Blacklist</strong>中可以手动进行调整，具体的就不展开了，大家有兴趣去自己尝试一下</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.08.29</strong> 建立初稿</li>
<li><strong>2019.09.04</strong> 完成内容</li>
<li><strong>2019.09.10</strong> 增加视频说明</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划07 翻越长城</title>
    <url>/2019/09/16/linux-router-07-over-the-gfw/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>前期的准备工作已经基本上完成了，接下来就是翻越长城，世界那么美好，为啥不出去看看呢！本篇将利用近几年比较热门的<a href="https://github.com/v2ray/v2ray-core">V2Ray</a>配合iptables实现自动翻墙，实现方式和openwrt上是一样的，只不过本文使用的是普通的Linux发行版而已。</p>
<span id="more"></span>

<h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><hr>
<p><strong>V2Ray</strong> V2Ray是<a href="https://v2ray.com/">Project V</a>项目的核心组成，它是由一群爱好自由的有志之士共同开发的，至今已经发展出多种方案来应对GFW对翻墙的封锁，这也是在SS和SSR流量有嫌疑被精确识别的前提下最好的翻墙方案 <strong>（当然，这只是个人的观点，不同地区GFW对不同工具会有不同的侧重）</strong></p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/01.png" class="" title="v2 01">

<p><strong>iptables</strong> Linux上的防火墙配置工具就无需过多介绍了吧，前期用来配置路由就是靠它，接下来在科学上网中它也将担任重要的角色</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr>
<blockquote>
<p>本例中使用了V2Ray自身支持的一个功能协议，名字是 <strong><a href="https://v2ray.com/chapter_02/protocols/dokodemo.html">dokodemo-door</a>（任意门）</strong> 官方的说明文档已经把每个参数都进行了说明，如果配置成功的话，基本上透明代理的效果会很好（前提你自己有一个比较高速的梯子，或者机场也行，最近支持V2Ray的机场好像变多了）</p>
<p>当然对于大部分人来说这样的说明肯定一头雾水，让人无从下手，还好官网直接提供了两个白话文教程，<a href="https://toutyrater.github.io/app/transparent_proxy.html">白话文教程</a>、<a href="https://guide.v2fly.org/app/transparent_proxy.html#%E8%AE%BE%E7%BD%AE%E6%AD%A5%E9%AA%A4">新白话文教程（社区版）</a>，社区版可能会更加容易让人接受一点</p>
</blockquote>
<img src="/2019/09/16/linux-router-07-over-the-gfw/11.png" class="" title="v2 02">

<p>那它是怎么实现科学上网的呢？图不高兴画了，就直接用文字来表述一下吧，具体的过程主要包括如下几个部分：</p>
<ul>
<li><p>发起访问</p>
<p>假设你想访问被墙的网站，你会对路由器发起一次通讯请求，此时浏览器会对默认的网关发送一些数据包，这些数据包包含了来源地址，域名信息等必要的信息；</p>
</li>
<li><p>数据接收部分</p>
<p>到达网关之后，此处就是我的软路由，数据包首先会被 <strong>iptables</strong>（实际上并不是它，而是内核中的<a href="https://zh.wikipedia.org/wiki/Netfilter">Netfilter</a>，此处只是为了方便说明而已，使用 <strong>iptables</strong> 这个防火墙配置工具代指Linux系统的防火墙部分）接收到，此时 <strong>iptables</strong> 就会基于预先设置的规则对数据包进行匹配；</p>
</li>
<li><p>路由判断</p>
<p><strong>iptables</strong> 会根据数据包中所携带的目标域名或IP判断它的走向，首先是判断是否是本机或者本地局域网的地址，如果是的话就发送过去，如果不是的话就会基于设置的防火墙规则转发给 <strong>V2Ray</strong> 的透明代理端口—— <strong>dokodemo-door</strong> 协议入口；</p>
</li>
<li><p><strong>V2Ray</strong> 处理数据</p>
<p>如果是此时 <strong>V2ray</strong>接收到了数据，它内置了一套路由系统，也会对数据包进行分析，如果数据包目标地址是国内的地址，那 <strong>V2Ray</strong> 不会对数据包进行处理，直接就按照原来的目标地址发送过去，而国外的地址，就会通过预先配置好的梯子通道转发出去，这样就实现了科学上网，当然 <strong>V2Ray</strong> 的功能不止于此，迫于篇幅，本篇就不详细展开了。</p>
</li>
</ul>
<h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><hr>
<h3 id="1-给系统配置代理"><a href="#1-给系统配置代理" class="headerlink" title="1.给系统配置代理"></a>1.给系统配置代理</h3><p>基本上没有把科学上网配置好之前，这一步都是必须的，此处需要说一句 <strong>感谢伟大的防火墙</strong></p>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://172.16.1.10:1081</span><br><span class="line">export https_proxy=$http_proxy</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>此处主要使用的是http代理，可以通过 ss 或者 V2Ray 提供</strong></p>
</blockquote>
<h3 id="2-使用V2Ray官方一键安装脚本进行安装"><a href="#2-使用V2Ray官方一键安装脚本进行安装" class="headerlink" title="2.使用V2Ray官方一键安装脚本进行安装"></a>2.使用V2Ray官方一键安装脚本进行安装</h3><p><strong>V2Ray</strong> 项目直接提供了官方的一键安装脚本，由于是使用GO语言编写的，除非自己喜欢折腾，基本上都不需要进行编译安装，一键脚本会自动从github上下载最新的编译好的二进制版本进行安装，同时它也会自动配置好自启动，由于国内访问 <strong>github</strong> 的速度实在是不理想，所以我在第一步的时候就配置好了代理以提高一键脚本的执行速度，直接执行 <code>bash &lt;(curl -L -s https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</code></p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/07.png" class="" title="v2 04">

<p>执行完成之后会自动随机生成端口和UUID，并配置好自启动，此处使用的是 <strong>debian</strong>，一键脚本基本上可以把大部分配置操作都搞定</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/08.png" class="" title="v2 05">

<h3 id="3-V2Ray配置文件说明"><a href="#3-V2Ray配置文件说明" class="headerlink" title="3.V2Ray配置文件说明"></a>3.V2Ray配置文件说明</h3><p>V2Ray的默认配置文件是<code>/etc/v2ray/config.json</code>，如果使用的是一键脚本的话，默认安装的是服务端配置，此处我打算建立一个本地的科学上网软路由，那么就需要将其修改为客户端模式，不过在这之前首先要对V2Ray的配置文件格式做一下简单介绍，打开配置文件<code>vi /etc/v2ray/config.json</code>，如下图所示：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">36133</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;599a3694-2d63-45da-9738-a568d24c41c2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">64</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:private&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>根据官方教程，整个配置文件应该由如下几个部分构成，但这些部分都是可以精简的，但有几个部分是必须的，如果是服务端的话，<strong>inbounds</strong>、<strong>outbounds</strong>、<strong>routing</strong>这三个部分是必要的；而如果是客户端的话，一般会多一个<strong>dns</strong>模块提供域名解析的支持，当然如果你对配置文件比较熟悉的话，可以通过增加更多的模块实现更多的功能，完整的结构如下：</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/10.png" class="" title="v2 06">

<p><strong>inbounds</strong>这个部分作为主机的接收端，会监听进入系统的一些连接，一般情况下监听本机端口的都是对外提供服务的，此处也不例外，不管是服务端还是客户端，都是在<strong>inbounds</strong>处提供服务，它相当于是V2Ray的入口</p>
<p><strong>outbounds</strong>进行对外连接，如果是在服务端，那么就是客户端流量的访问出口，同时也能对一些流量进行屏蔽，而在客户端，主要会提供与服务端进行对接的服务</p>
<p><strong>routing</strong>可以说是V2Ray上最有用的一个部分，Linux可以通过防火墙配置相关的策略对数据流量走向进行调整，而此处的这个功能也可以对<strong>inbounds</strong>和<strong>outboounds</strong>处的数据流量进行调整，好像除了NAT功能它不能实现，其它的部分都可以，当然此处没有考虑到系统资源开销的问题</p>
<blockquote>
<p>相对而言，这个配置文件还是比较复杂的，如果要深入讲的话受限于篇幅，好像不现实，本篇还是以实现透明代理为主吧。</p>
</blockquote>
<h3 id="4-修改配置文件开启透明代理"><a href="#4-修改配置文件开启透明代理" class="headerlink" title="4.修改配置文件开启透明代理"></a>4.修改配置文件开启透明代理</h3><p>客户端部分的主体结构是这样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>                                 <span class="comment">//此处主要提供透明代理服务，计划监听在10000端口，同时也可以提供socks或者http代理等功能</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>                                <span class="comment">//主要用于对接vps上部署的V2Ray服务端</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>                                      <span class="comment">//对传入的带域名信息的请求进行解析，也能一定程度上提供抗污染的DNS解析</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>                                   <span class="comment">//对传入传出的数据流进行路由选择，国内流量走国内的，国外的走代理，如果是广告的话就进行屏蔽，亦或者一些其它的操作</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>为了方便理解，我会将每个部分分别配置一个实例</strong></p>
</blockquote>
<h4 id="配置透明代理监听在10000端口"><a href="#配置透明代理监听在10000端口" class="headerlink" title="配置透明代理监听在10000端口"></a>配置透明代理监听在10000端口</h4><blockquote>
<p>此处参照两个白话文教程：<a href="https://toutyrater.github.io/app/transparent_proxy.html">白话文教程</a>、<a href="https://guide.v2fly.org/app/transparent_proxy.html#%E8%AE%BE%E7%BD%AE%E6%AD%A5%E9%AA%A4">新白话文教程（社区版）</a></p>
</blockquote>
<p>作为客户端的话，<strong>inbounds</strong>部分将监听本地的一个或者多个端口，我会创建一个透明代理和一个socks5代理，socks5代理主要用于测试科学上网是否成功，废话不多说，直接开始吧。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span>               <span class="comment">//协议类型选择dokodemo-door，透明代理就用这个</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span>                             <span class="comment">//监听的端口</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp,udp&quot;</span><span class="punctuation">,</span>                    <span class="comment">//传输协议，只支持tcp和udp，icmp是不支持的，所以用来ping被墙的ip也是没用的</span></span><br><span class="line">      <span class="attr">&quot;followRedirect&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span>                   <span class="comment">//此处必须是开启，否则它将不能识别由iptables转发来的流量</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                         <span class="comment">//此处可以开启流量侦测，一定程度上解决DNS污染</span></span><br><span class="line">      <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http&quot;</span><span class="punctuation">,</span><span class="string">&quot;tls&quot;</span><span class="punctuation">]</span>           <span class="comment">//流量侦测的协议类型，主要是网络上最常用的两种http和tls</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span>                                           <span class="comment">//至此，透明代理所需要的数据入口就配置完成了</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span>                       <span class="comment">//这是我所配置的socks代理协议，此处兼容socks5，socks4e，socks4，它们是什么？不用管，这样配置就对了</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span>                              <span class="comment">//socks默认监听的端口1080</span></span><br><span class="line">    <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span>                       <span class="comment">//监听的地址，默认情况下是本机回环&quot;127.0.0.1&quot;，如果想要局域网内的设备也连接这个代理，使用&quot;0.0.0.0&quot;，此处需要搞明白&quot;127.0.0.1&quot;和&quot;0.0.0.0&quot;的区别</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span>                        <span class="comment">//如果不需要对连接进行身份认证，那么就用&quot;noauth&quot;，一般情况下都是在局域网里面使用的，就用不认证吧！</span></span><br><span class="line">      <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span>                             <span class="comment">//udp就不开启了，此处默认不开启，可以省略</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                         <span class="comment">//同样的开启流量侦测</span></span><br><span class="line">      <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http&quot;</span><span class="punctuation">,</span><span class="string">&quot;tls&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socksin&quot;</span>                           <span class="comment">//为这个socks代理添加一个标记，方便后期在**routing**中进行调用</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>inbounds</strong>部分就结束了，此处主要是对局域网和本机提供服务，被动的对局域网内或者本机的连接进行响应；</p>
<h4 id="与远程服务器建立连接（与梯子建立连接）"><a href="#与远程服务器建立连接（与梯子建立连接）" class="headerlink" title="与远程服务器建立连接（与梯子建立连接）"></a>与远程服务器建立连接（与梯子建立连接）</h4><blockquote>
<p>V2Ray对外连接的配置主要集中在<strong>outbounds</strong>部分，此处集中了梯子的连接，可以是一个或者多个，默认情况下如果没有在<strong>routing</strong>部分进行指定，系统都会使用由上至下第一个对外出口作为默认出口使用，所以排在第一个的具有举足轻重的地位，以下将会放上我自己的配置：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span>                       <span class="comment">//对外的协议类型，一般与vps对接的话都是用的vmess协议，此处先不考虑这个协议是否靠谱，你只要把它当成是一种加密方式即可</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;域名或IP&quot;</span><span class="punctuation">,</span>               <span class="comment">//远程服务的域名或者IP，建议使用域名，可以通过tls进行混淆以欺骗gfw对数据流量的干扰，就是ssr曾经引以为豪的东西</span></span><br><span class="line">          <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span>                        <span class="comment">//tls一般都是用443端口的，此处我也使用了443端口</span></span><br><span class="line">          <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;65a8ee27-b88b-0530-64d8-aad37d4980d8&quot;</span><span class="punctuation">,</span>     <span class="comment">//uuid就类似于密码，可以使用`v2ctl uuid`命令生成，当然此处需要和服务端相同</span></span><br><span class="line">              <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span>                  <span class="comment">//此处也需要和服务端相同</span></span><br><span class="line">              <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span>              <span class="comment">//此处的加密一般是在客户端指定的，服务端会根据客户端的设置情况自动进行相应的加密，但tls本身也是一种加密，个人认为如果使用了tls混淆的话此处直接none即可</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                       <span class="comment">//这个项目对通讯协议进行一些微调</span></span><br><span class="line">      <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span>                        <span class="comment">//使用websocket连接</span></span><br><span class="line">      <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span>                      <span class="comment">//tls混淆加密</span></span><br><span class="line">      <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;connectionReuse&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ray&quot;</span>                        <span class="comment">//当访问这个目录的时候使用websocket连接，由于官方手册中使用了这个目录，很容易被针对，个人建议改成一个字符串或者别的什么内容</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span>                            <span class="comment">//给这个出口加个标签</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span>                    <span class="comment">//直连出口</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>                           <span class="comment">//没啥需要设置的</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span>                           <span class="comment">//标签不要忘记，下面的路由部分会用到的</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span>                  <span class="comment">//黑洞，你只要敢来我就敢把你全吞了，一般用来做广告屏蔽等操作</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>                           <span class="comment">//依然不需要设置些啥</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span>                          <span class="comment">//标签不能忘</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>outbounds</strong>的配置大致上就是这样的，此处配置了三个出口</p>
<h4 id="DNS服务器配置"><a href="#DNS服务器配置" class="headerlink" title="DNS服务器配置"></a>DNS服务器配置</h4><blockquote>
<p>如果没有添加DNS服务器的配置的话，V2Ray会自动使用系统配置好的地址，由于我已经解决了DNS污染，所以我完全可以在此处进行省略，但考虑到方案并不是只有一种，多一条路多一种选择，还是稍微举个例子吧！</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;8.8.8.8&quot;</span><span class="punctuation">,</span>                                <span class="comment">//谷歌的</span></span><br><span class="line">    <span class="string">&quot;9.9.9.9&quot;</span><span class="punctuation">,</span>                                <span class="comment">//IBM的</span></span><br><span class="line">    <span class="string">&quot;localhost&quot;</span>                               <span class="comment">//本机配置好的，如果是我的软路由的话污染已经解决了</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处直接使用了最简单的配置，使用这样的配置的话，当用户使用socks5代理进行上网时，会优先使用谷歌和IBM的服务器进行域名解析，如果上述的服务器都挂了，那么就使用系统自带的DNS服务器进行解析，v2ray的内置DNS功能还是很强大的，受限于篇幅，此处就不展开了</p>
<h4 id="强大的路由功能"><a href="#强大的路由功能" class="headerlink" title="强大的路由功能"></a>强大的路由功能</h4><blockquote>
<p>一般的科学上网工具除了提供分流外基本上不会再有别的功能了，而V2Ray可通过<strong>routing</strong>这个功能模块提供类似于<strong>Linux防火墙</strong>一样的功能，根据配置好的规则选择对外出口，负载均衡，识别连接，屏蔽广告，基于端口匹配等等，当然这些功能对于初学者而言简直就是天书，本次也不会详细去说明，但大家只需要知道一点，那就是善用<strong>routing</strong>模块</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IPIfNonMatch&quot;</span><span class="punctuation">,</span>           <span class="comment">//必要的选项，如果匹配不到就直接解析成ip</span></span><br><span class="line">  <span class="attr">&quot;rule&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                             <span class="comment">//匹配域名</span></span><br><span class="line">        <span class="string">&quot;geosite:category-ads-all&quot;</span>            <span class="comment">//匹配常见广告域名</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span>                <span class="comment">//利用标记将出口设置为“黑洞”，相当于对广告进行屏蔽</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;geosite:cn&quot;</span>                         <span class="comment">//匹配国内的域名</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span>                 <span class="comment">//满足这个规则的网址直连不做操作</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;geoip:cn&quot;</span>                            <span class="comment">//匹配国内的ip</span></span><br><span class="line">        <span class="string">&quot;geoip:private&quot;</span>                       <span class="comment">//匹配常用内网的ip</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span>                 <span class="comment">//满足此规则的ip直连</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>以上的配置屏蔽了一些常用的广告域名，同时不代理内网IP、中国区IP、中国区域名、常见的没被墙的域名，<code>而没有手动指定的流量会使用默认的一条规则，这个默认规则不需要进行手动设置，默认是**inbounds**中配置的第一条出口</code>；这个模块下的匹配规则和Linux防火墙类似，逐条依次进行匹配，需要屏蔽的放在上面，之后的规则会依次匹配，V2Ray的规则匹配也是这样的顺序，由上至下，哪个在上面哪个先匹配，一旦匹配到就跳出规则，所以在配置路由的时候需要好好规划好顺序</p>
<h4 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/access.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/error.log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp,udp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;followRedirect&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domainOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http&quot;</span><span class="punctuation">,</span><span class="string">&quot;tls&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socksin&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;65a8ee27-b88b-0530-64d8-aad37d4980d8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;connectionReuse&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ray&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;8.8.8.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;9.9.9.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IPIfNonMatch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rule&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;geosite:category-ads-all&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;geosite:cn&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">          <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在上述的配置文件中我增加了一个log模块，主要是为了进行故障分析，在<code>/var/log/v2ray</code>目录下生成两个日志文件，方便遇到问题之后进行分析，整个配置文件除了科学上网部分没有配置外，其它都能实际使用，这个部分是可以当作模板进行使用的</p>
<p>当然使用vim进行文本编辑的话对于普通用户而言实在是太痛苦了，那不妨把它拷贝下来在本地计算机上面进行编辑，我使用的是windows平台上最好的文本编辑器之一的<a href="https://code.visualstudio.com/">vscode</a>，首先先把配置文件下载到本地：</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/18.png" class="" title="v2 07">

<p>如果你使用的是xshell这个ssh工具的话，直接安装<strong>lrzsz</strong>这个工具即可，安装完之后执行<code>sz /etc/v2ray/config.json</code>，然后选择保存的位置就能将配置文件下载到本地了</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/17.png" class="" title="v2 08">

<p>如果没有使用上述工具的话，使用<a href="https://winscp.net/eng/index.php">winscp</a>也是可以的，或者如果是windows 10操作系统的话，直接使用内置的scp命令也是可以将文件下载到本地的，打开powershell或者cmd，执行<code>scp root@172.16.1.50:/etc/v2ray/config.json d:\desktop\config.json.v2</code>，这样就复制到我的桌面了</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/25.png" class="" title="v2 09">

<p>之后就用<strong>vscode</strong>进行编辑，由于我下载下来的时候修改了文件名，在后面加上了一个v2后缀（这一步并不是必须的，如果直接下载下了json后缀的，就不需要以下步骤）</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/26.png" class="" title="v2 10">
<img src="/2019/09/16/linux-router-07-over-the-gfw/27.png" class="" title="v2 11">
<img src="/2019/09/16/linux-router-07-over-the-gfw/28.png" class="" title="v2 12">

<p>修改好配置文件之后就可以上传到服务器了，使用scp的话顺序改一下就好</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/30.png" class="" title="v2 13">

<p><code>cat /etc/v2ray/config.json.v2 &gt; /etc/v2ray/config.json</code>即可</p>
<p>当把配置文件修改好之后，记得检测一下文件格式是否有问题，执行命令<code>/usr/bin/v2ray/v2ray --test /etc/v2ray/config.json</code>如果没问题，直接保存退出（如果使用vscode进行编辑的话，基本上不会有多少问题），之后执行<code>systemctl restart v2ray</code>重启服务即可</p>
<h3 id="5-配置防火墙规则"><a href="#5-配置防火墙规则" class="headerlink" title="5.配置防火墙规则"></a>5.配置防火墙规则</h3><blockquote>
<p>刚刚配置好的V2Ray只能提够一个透明代理的入口，它还没有那么强大控制数据流量走向，接下来的事情就交给防火墙吧，至于是什么原理，小孩子知道那么多干啥，照着做就是了</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接对tcp动手（不知道tcp是啥玩意的也不用在意，照着做就是了）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一条叫做v2的新链</span></span><br><span class="line">iptables -t nat -N v2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略掉远程服务器的地址，避免出现环回</span></span><br><span class="line">iptables -t nat -A v2 -d vps地址 -j RETURN</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排除掉内网地址，防止访问局域网地址的时候也被代理</span></span><br><span class="line">iptables -t nat -A v2 -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A v2 -d 192.168.0.0/16 -j RETURN</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">除已经被排除的地址，其它的全部交给V2ray进行处理，此处全部转发到了10000端口</span></span><br><span class="line">iptables -t nat -A v2 -p tcp -j REDIRECT --to-ports 10000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一句会将系统接受到的所有不是本机为地址的数据全部转发到v2链</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j v2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这句可以对本机的流量进行代理，个人觉得没有必要，有些时候反而容易出现问题</span></span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j v2</span><br></pre></td></tr></table></figure>

<img src="/2019/09/16/linux-router-07-over-the-gfw/32.png" class="" title="v2 14">

<blockquote>
<p>请忽略中间发生的输入错误<br>此处我只配置了TCP流量部分，UDP部分我觉得普通用户暂时用不到，一般游戏用户会比较需要，但v2ray对游戏的支持并不是很好，如果有兴趣的话我会在下一篇文章中进行说明</p>
</blockquote>
<p>执行上述命令之后呢，墙基本上已经不能锁住你了</p>
<h2 id="配置完验证一下"><a href="#配置完验证一下" class="headerlink" title="配置完验证一下"></a>配置完验证一下</h2><hr>
<h3 id="验证对外的梯子是否通了"><a href="#验证对外的梯子是否通了" class="headerlink" title="验证对外的梯子是否通了"></a>验证对外的梯子是否通了</h3><blockquote>
<p>我在入口部分除了建立了透明代理，同时也配置了一个socks5代理，此处就用这个来验证一下对外的连接是否正常</p>
</blockquote>
<p><code>curl -x socks5://127.0.0.1:1080 google.com</code>这个命令执行之后如果能出现如下的界面就说明对外的梯子出口是连接成功的，V2Ray可以提供科学上网的功能，此处没问题的话即可进行下一步</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/31.png" class="" title="v2 16">
<img src="/2019/09/16/linux-router-07-over-the-gfw/33.png" class="" title="v2 15">

<blockquote>
<p>如果有问题的话进行下述的排查：</p>
</blockquote>
<h4 id="服务器和客户端之间的时间差不能超过一分钟"><a href="#服务器和客户端之间的时间差不能超过一分钟" class="headerlink" title="服务器和客户端之间的时间差不能超过一分钟"></a><strong>服务器和客户端之间的时间差不能超过一分钟</strong></h4><p>查看两者之间的时间差，如果超过了一分钟就无法正确的建立连接，可以通过自动同步时间解决</p>
<h4 id="查看配置文件中的域名，uuid，端口号等有没有存在差异"><a href="#查看配置文件中的域名，uuid，端口号等有没有存在差异" class="headerlink" title="查看配置文件中的域名，uuid，端口号等有没有存在差异"></a><strong>查看配置文件中的域名，uuid，端口号等有没有存在差异</strong></h4><p>仔细对比服务端和客户端之间的配置项目，常见的错误主要是uuid和端口号不对应</p>
<h3 id="透明代理测试"><a href="#透明代理测试" class="headerlink" title="透明代理测试"></a>透明代理测试</h3><blockquote>
<p>要测试其实很简单，打开一台电脑，通过自建的软路由上网，看看能不能科学上网就可以判断出来了</p>
</blockquote>
<p>此处我依然使用我一直使用的manjrao进行测试，打开火狐，打开谷歌等不存在的网站，看看能否正常打开，然后再放个<a href="https://youtube.com/">YOUTUBE</a>看是否可以正常播放，如果没问题的话那就说明你配置成功了，接下来该干嘛干嘛了，世界离你就差延时那点距离了</p>
<img src="/2019/09/16/linux-router-07-over-the-gfw/34.png" class="" title="v2 17">

<blockquote>
<p>打开<a href="http://ip111.cn/">ip111.cn</a>确认一下是否能够正常访问外网，只要后面两个显示的是你vps地址就说明是正常了</p>
</blockquote>
<img src="/2019/09/16/linux-router-07-over-the-gfw/35.png" class="" title="v2 18">

<h2 id="规则的自动加载"><a href="#规则的自动加载" class="headerlink" title="规则的自动加载"></a>规则的自动加载</h2><hr>
<p>防火墙规则过去在网卡的开关过程中就能自动进行保存和加载，如果怕防火墙规则丢失的话，建议手动保存一下防火墙规则</p>
<p><code>iptables-save &gt; /root/iptables.rule</code>就可以了，这样开机就会自动加载了，当然你如果搞错了防火墙的输入顺序就有可能会出问题了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>本篇内容中涉及到了比较多的V2Ray配置文件实例，虽然看上去很多，但并没有深入去分析每一个语句的作用，大家看看就好，直接使用最后的实例即可，如果想要深入的了解的话，我会在下篇做出比较详细的分析，先劝个退，不认真学习的话真的会搞不懂的哦，越看越迷糊都有可能哦！</p>
<p>对比两年前初次使用V2Ray，感觉官方文档完善了好多，但依然有很多坑需要去解决，下期预告，对于配置文件的详细分析（希望自己的拖延症不会像这次这样严重）！</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.09.16</strong> 初稿</li>
<li><strong>2019.09.25</strong> 根据测试结构完善大纲</li>
<li><strong>2019.10.18</strong> 磨磨蹭蹭的把坑填上，应该是可以上线了</li>
<li><strong>2020.02.23</strong> 修正部分错误</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划补充篇 分流及路由优化</title>
    <url>/2019/10/19/linux-router-08-v2ray-advanced-configuration/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>一直写不出自己满意的内容，那么就推翻重来吧，上一篇主要是搭建起了透明代理，上外网应该是没多大问题了，但是如果真的按照这样的方法就会遇到一个问题，部分国内的网站会出现访问缓慢的问题，这可能是系统没有正确的判断ip地址的所属地，把它当成国外的网站进行了代理，这明显是愚蠢的行为，所以这篇就完善一下这个方案，分享一下我个人的操作～</p>
<span id="more"></span>

<h2 id="v2ray作用模块"><a href="#v2ray作用模块" class="headerlink" title="v2ray作用模块"></a>v2ray作用模块</h2><hr>
<p>想要实现路由及分流，最主要需要编辑的是如下模块：</p>
<ul>
<li>inbounds</li>
<li>outbounds</li>
<li>routing</li>
</ul>
<blockquote>
<p>这三个部分的作用比较大，其它的暂时就不做分析了</p>
</blockquote>
<h2 id="v2ray工作流程"><a href="#v2ray工作流程" class="headerlink" title="v2ray工作流程"></a>v2ray工作流程</h2><p>inbounds &lt;—-&gt; routing &lt;—-&gt; outbounds</p>
<blockquote>
<p>本地客户端通过 v2ray 对外开放的端口进行接入，此处常用socks或者dokodemo-door</p>
</blockquote>
<h2 id="v2ray进行分流"><a href="#v2ray进行分流" class="headerlink" title="v2ray进行分流"></a>v2ray进行分流</h2><hr>
<p>v2ray的分流主要集中在 <strong>routings</strong> 部分进行配置</p>
<h3 id="域名匹配"><a href="#域名匹配" class="headerlink" title="域名匹配"></a>域名匹配</h3><blockquote>
<p>域名匹配支持多种模式，字符串匹配、正则表达式、子域名、完整匹配、预定义域名列表、从文件中加载域名，官方推荐的方法是使用子域名，但个人比较推荐使用预定义域名列表，v2ray 本身已经内置在了安装包中<br>，可以直接使用，调用也很简单</p>
</blockquote>
<p>预定义域名列表由 <a href="https://github.com/v2fly/domain-list-community">domain-list-community</a> 项目维护，预置于每一个 v2ray 的安装包中，文件名为 geosite.dat。这个文件包含了一些常见的域名，使用方式：geosite:listname，如 geosite:google 表示对 domain-list-community 项目 data 目录里的 google 文件内包含的域名，进行路由筛选或 DNS 筛选。</p>
<p>常见的域名有：</p>
<ul>
<li>category-ads：包含了常见的广告域名。</li>
<li>category-ads-all：包含了常见的广告域名，以及广告提供商的域名。</li>
<li>tld-cn：包含了 CNNIC 管理的用于中国大陆的顶级域名，如以 .cn、.中国 结尾的域名。</li>
<li>tld-!cn：包含了非中国大陆使用的顶级域名，如以 .hk（香港）、.tw（台湾）、.jp（日本）、.sg（新加坡）、.us（美国）.ca（加拿大）等结尾的域名。</li>
<li>geolocation-cn：包含了常见的大陆站点域名。</li>
<li>geolocation-!cn：包含了常见的非大陆站点域名，同时包含了 tld-!cn。</li>
<li>cn：相当于 geolocation-cn 和 tld-cn 的合集。</li>
<li>apple：包含了 Apple 旗下绝大部分域名。</li>
<li>google：包含了 Google 旗下绝大部分域名。</li>
<li>microsoft：包含了 Microsoft 旗下绝大部分域名。</li>
<li>facebook：包含了 Facebook 旗下绝大部分域名。</li>
<li>twitter：包含了 Twitter 旗下绝大部分域名。</li>
<li>telegram：包含了 Telegram 旗下绝大部分域名。<br>更多类别，可以查看 <a href="https://github.com/v2fly/domain-list-community/tree/master/data">data</a> 目录</li>
</ul>
<p>以下示例将自动屏蔽常见的广告域名，并直连 apple 和大陆域名站点，自动将 google 等域名转发到两个不同的对外出口上（如果你有多个服务器的话可以这样操作），没有指定的域名会自动选择默认的出口进行转发。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IPIfNonMatch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;domainMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mph&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">	    <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blockout&quot;</span><span class="punctuation">,</span></span><br><span class="line">	    <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;geosite:category-ads-all&quot;</span> <span class="comment">//匹配广告域名，并路由到 blockout 部分，即被拦截</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">	    <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">	    <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	      <span class="string">&quot;geosite:apple&quot;</span><span class="punctuation">,</span> <span class="comment">//匹配 Apple 旗下域名，并路由到 direct 部分，即直连</span></span><br><span class="line">        <span class="string">&quot;geosite:cn&quot;</span> <span class="comment">//匹配大陆域名，并路由到 direct 部分，即直连</span></span><br><span class="line">	    <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span>	</span><br><span class="line">	    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy01&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;geosite:google&quot;</span><span class="punctuation">,</span> <span class="comment">//匹配 Google 旗下域名，并路由到 proxy01 部分，即转发到 proxy01 出口</span></span><br><span class="line">        <span class="string">&quot;geosite:facebook&quot;</span> <span class="comment">//匹配 Facebook 旗下域名，并路由到 proxy01 部分，即转发到 proxy01 出口</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy02&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;geosite:microsoft&quot;</span><span class="punctuation">,</span> <span class="comment">//匹配 Microsoft 旗下域名，并路由到 proxy02 部分，即转发到 proxy02 出口</span></span><br><span class="line">        <span class="string">&quot;geosite:twitter&quot;</span><span class="punctuation">,</span>  <span class="comment">//匹配 Twitter 旗下域名，并路由到 proxy02 部分，即转发到 proxy02 出口</span></span><br><span class="line">        <span class="string">&quot;geosite:telegram&quot;</span> <span class="comment">//匹配 Telegram 旗下域名，并路由到 proxy02 部分，即转发到 proxy02 出口</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="IP文件"><a href="#IP文件" class="headerlink" title="IP文件"></a>IP文件</h3><p>和预定于域名列表一样，v2ray 在安装包中也内置了预定义的 IP 列表，使用方法和上述的域名列表类似，实例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;geoip:cn&quot;</span><span class="punctuation">,</span> <span class="comment">//匹配大陆 IP 列表，并路由到 direct 部分，即直连</span></span><br><span class="line">    <span class="string">&quot;geoip:private&quot;</span> <span class="comment">//匹配私有 IP 列表(常见的内网 IP 地址，如 192.168.1.0/24)，并路由到 direct 部分，即直连</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="第三方文件"><a href="#第三方文件" class="headerlink" title="第三方文件"></a>第三方文件</h3><p>除了安装包中内置的 geosite.dat 和 geoip.dat 文件外，v2ray 还可以使用第三方的域名列表文件，我个人使用了<br><a href="https://github.com/ToutyRater/V2Ray-SiteDAT">https://github.com/ToutyRater/V2Ray-SiteDAT</a><br><a href="https://github.com/Loyalsoldier/v2ray-rules-dat">https://github.com/Loyalsoldier/v2ray-rules-dat</a></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><hr>
<ul>
<li><strong>2019.10.19</strong> 初稿</li>
<li><strong>2019.11.04</strong> 协议分析</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划9 通过wireguard建立对外VPN</title>
    <url>/2020/01/14/linux-router-09-make-a-vpn-with-wireguard/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>梯子已经搭好了，在家上网自然可以没有限制的看世界，那如果出门了怎么办呢，手机上装客户端什么的也可以，但是显得逼格不够，那本篇就来建立一个vpn连接吧！</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><hr>
<p>我选择的vpn协议是<a href="https://www.wireguard.com/">Wireguard</a>，曾经有一段时间它被很多人传颂为不怕被封的vpn，这个时候就要呵呵了，虽然它使用的是udp来进行数据通信的，但说它不怕被封就有点假了，运营商针对udp做个限速，你协议再牛也废了</p>
<p>现在用它翻墙的人也不多了，但作为vpn难道就只能用来翻墙吗，当然不是（虽然我的目的还是用来连接到家中的网络进行翻墙），和家中的服务器进行加密通信也不错，没事看看家中nas上的电影，调取一些存档也是很不错的</p>
<h2 id="Wireguard"><a href="#Wireguard" class="headerlink" title="Wireguard"></a>Wireguard</h2><hr>
<p>Wireguard属于新一代的vpn，它相比IPsec这种vpn协议而言更加简单并且更快，而它的代码相比对应的openvpn函数库则更加简洁高效。Wireguard的可移植性很好，最开始实在Linux上发布，现在已经支持Windows，MacOS，BSD，ISO，Android等平台，Wireguard还是非常新的vpn协议规范，目前还在积极开发中，因为其简单高效并且具有极高的安全性，业界对其评价很高，现在已经被合并到Linux 5.x内核中了，在不久的将来它可能成为一款主流的vpn协议</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由补完计划 挖坑起因</title>
    <url>/2019/07/17/router/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间我一直都在发布编译OpenWRT的相关视频（其实自己也没发布几个，重度懒症患者），可是实际上我并不是一个OpenWRT用户，很难相信吧！具体是什么情况，就让我娓娓道来吧～</p>
<hr>
<span id="more"></span>

<h2 id="简单展示"><a href="#简单展示" class="headerlink" title="简单展示"></a>简单展示</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/01FVI6bnCcU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<hr>
<h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><p>作为一个网络技术人员，如果单纯使用百度的话真的找不到多少有用的资料，特别是当初学习Linux的时候，虽然我的入门书是<a href="http://linux.vbird.org/linux_basic/"><strong>《鸟哥的私房菜》</strong></a>这样的写得非常详细，甚至说有些罗嗦的书，但实际操作中还是有很多机会遇到解决不了的问题，那怎么办呢！只能用搜索引擎，当时正值Google还未退出中国，Google引擎还是很好用的时候，后悔入坑了Google全家桶，搞得我至今还是无法割舍Google帐号所带来的便利，后来的事情相信大家也是知道的，Google退出中国，只能使用香港服务器，到后来Gmail被屏蔽，Google彻底被墙，那不能用怎么办呢，当初还非常天真的认为baidu应该还能凑合吧，可是最后发现那就是个垃圾～～～</p>
<p>没办法，先从一些免费的工具开始吧，手机上安装了很多免费翻墙软件，然后随着天朝加紧GFW的建设，这些软件都退出了历史舞台，直到Shdowsocks的出现，我发现了可以在路由器上配置透明代理这样的操作，正值<a href="https://zh.wikipedia.org/wiki/%E6%9E%81%E8%B7%AF%E7%94%B1"><strong>极路由</strong></a>兴起的智能路由器风潮（当时并没有了解过OpenWRT，大家不要喷我），然后就入坑了极1S，然后官方的第三方应用被限制，没办法，求助google，仔细去研究了一下OpenWRT，刷了感觉还凑合，可是极1S是百兆的路由器，家里的宽带支持多拨，它的性能跟不上……</p>
<p>15年的时候软路由开始兴起，一开始并没有入坑，不过呢，本身在公司就有服务器资源，使用<a href="https://en.wikipedia.org/wiki/VMware_ESXi"><strong>ESXI</strong></a>搭建了软路由来进行测试，其中也包括一些大名鼎鼎的防火墙产品，比如<a href="https://www.pfsense.org/"><strong>PFSENSE</strong></a>，<a href="http://www.panabit.com/"><strong>Panabit</strong></a>等，它们都很好，但是呢不能挂梯子，这是我所非常迫切的功能，没办法，最终只能使用x86版本的OpenWRT，当时好像对于多核和大内存支持还有问题，多拨的表现也很不咋地，那就稍微妥协一下吧，用OpenWRT做二级路由，通过它来挂梯子，在公司内部测试感觉方案成熟了，然后我就利用一块志强X3360+超微X7SBL-LN2在家整了一台，此时已经到了17年，KoolShare论坛的固件开始崭露头角，可是在使用了之后发现挂梯子稳定性真的捉急啊（也许是我的错觉吧，每天不重启一下梯子准挂），最终让我放弃OpenWRT的主要是它吧，当然其中也经历了大半年的煎熬。当然OpenWRT还是不错的，只是我不想再用了，<a href="https://github.com/coolsnowwolf/lede"><strong>Lean大神</strong></a>的固件还是非常靠谱的（原谅我一直没用他的源码进行编译）。</p>
<img src="/2019/07/17/router/01.png" class="" title="linux_router">

<p>最终我只能寻找替代方案，此时我正在用ss-local挂代理，然后研究了一下OpenWRT的挂梯子原理，知道了ss-redir这个Shdowsocks中的组件，好了，就你了，从挂代理一下子就进化到了透明网关，之后就开始了我Linux路由折腾之路，从第一个成熟版本到现在，差不多已经有两年时间了</p>
<hr>
<h2 id="Linux路由进化史"><a href="#Linux路由进化史" class="headerlink" title="Linux路由进化史"></a>Linux路由进化史</h2><ul>
<li>实现路由功能：iptables命令配置nat及forward</li>
<li>透明代理达成：iptables配置转发及ss-redir模式实现</li>
<li>DNS防污染：能挂梯子但是却无法获取到正确的地址，那等于没翻墙</li>
<li>广告屏蔽功能实现：发现一个有意思的项目Pihole，利用起来效果还可以</li>
<li>实现一些附加功能：KMS、内网穿透、状态监测、VPN等</li>
</ul>
<blockquote>
<p>以上即是我折腾出的功能</p>
</blockquote>
<hr>
<h2 id="自用Linux系统情况及改进计划"><a href="#自用Linux系统情况及改进计划" class="headerlink" title="自用Linux系统情况及改进计划"></a>自用Linux系统情况及改进计划</h2><table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">过去</th>
<th align="center">现在</th>
<th align="center">未来计划</th>
</tr>
</thead>
<tbody><tr>
<td align="center">操作系统</td>
<td align="center">Debian</td>
<td align="center">Debian</td>
<td align="center">alpine</td>
</tr>
<tr>
<td align="center">处理器核心数</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">内存大小</td>
<td align="center">1G</td>
<td align="center">256M</td>
<td align="center">128M</td>
</tr>
<tr>
<td align="center">梯子应用</td>
<td align="center">shadowsocks</td>
<td align="center">v2ray</td>
<td align="center">v2ray&#x2F;clash</td>
</tr>
<tr>
<td align="center">防火墙</td>
<td align="center">iptables</td>
<td align="center">iptables</td>
<td align="center">nftables</td>
</tr>
<tr>
<td align="center">广告过滤</td>
<td align="center">none</td>
<td align="center">pihole</td>
<td align="center">Adguard-home</td>
</tr>
<tr>
<td align="center">DNS防污染</td>
<td align="center">ss-tunnel</td>
<td align="center">dnscrypt-proxy</td>
<td align="center">Adguard-home</td>
</tr>
<tr>
<td align="center">附加功能</td>
<td align="center">none</td>
<td align="center">kms\frpc\wireguard\netdata</td>
<td align="center">ipxe\iscsi\upnp</td>
</tr>
</tbody></table>
<blockquote>
<p>这只是大致的情况，具体的会在后续内容中更新</p>
</blockquote>
<hr>
<h2 id="教程更新计划"><a href="#教程更新计划" class="headerlink" title="教程更新计划"></a>教程更新计划</h2><blockquote>
<p>需要一定的网络和Linux基础，懒癌患者托更比较严重，望周知</p>
</blockquote>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划00 虚拟机安装Debian</li>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划01 基本概念说明</li>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划02 Debian安装及配置基础路由功能</li>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划03 配置DNS和DHCP</li>
</ul>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划04 利用DNS进行广告过滤</li>
<li><input checked="" disabled="" type="checkbox"> Linux路由补完计划05 DNS防污染</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划06 透明代理搭建——V2ray篇</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划07 透明代理搭建——Shadowsocks篇</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划08 利用二级路由搭建Wireguard VPN</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划09 应用容器化（docker应用实例）</li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li><input disabled="" type="checkbox"> Linux路由补完计划10 LVM or RAID</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划11 搭建文件共享</li>
<li><input disabled="" type="checkbox"> Linux路由补完计划12 内网穿透</li>
</ul>
<hr>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li><strong>2019.07.17</strong> 初始版本</li>
<li><strong>2019.07.18</strong> 增加部分链接及说明调整</li>
<li><strong>2019.08.04</strong> 完善更新计划</li>
<li><strong>2019.09.10</strong> 格式调整</li>
<li><strong>2020.03.03</strong> 计划调整</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
